// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _BaseVyperLexer.flex

package org.vyperlang.plugin.grammar;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.vyperlang.plugin.psi.VyperTypes.*;


public class _BaseVyperLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\11\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\4\42"+
    "\1\44\5\42\1\45\1\46\3\42\1\47\2\42\1\50"+
    "\1\51\1\52\1\53\1\54\1\0\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\42\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\42\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\42\1\104"+
    "\1\105\1\106\1\107\6\0\1\110\32\0\1\111\u01df\0"+
    "\1\111\177\0\13\111\35\0\2\110\5\0\1\111\57\0"+
    "\1\111\240\0\1\111\377\0\u0100\112";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\7\26\1\27\1\1\1\30\1\31\20\26\1\32\1\33"+
    "\1\34\1\35\1\2\1\0\1\36\1\0\1\37\1\0"+
    "\1\40\1\0\1\41\1\0\1\42\1\43\1\44\1\45"+
    "\1\0\1\46\1\0\1\47\2\0\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\6\26\1\56\2\26\1\57\2\0"+
    "\16\26\1\60\1\26\1\61\2\26\1\62\7\26\1\37"+
    "\1\0\1\63\1\0\1\64\1\65\7\26\1\66\1\26"+
    "\1\67\1\0\1\70\1\0\5\26\1\71\7\26\1\72"+
    "\6\26\1\73\1\26\1\74\13\26\1\0\4\26\1\75"+
    "\2\26\1\76\6\26\1\77\1\100\1\101\3\26\1\102"+
    "\1\103\1\0\4\26\1\104\3\26\1\105\2\26\1\106"+
    "\6\26\1\107\1\0\1\110\5\26\1\111\1\26\1\112"+
    "\3\26\1\113\2\26\1\0\11\26\1\114\1\115\3\26"+
    "\1\116\1\117\2\26\1\120\1\26\1\121\1\122\2\26"+
    "\1\123\2\26\1\124\2\26\1\125\6\26\1\126\1\127"+
    "\1\26\1\130\1\26\1\131\1\132\2\26\1\133\3\26"+
    "\1\134\4\26\1\135\1\26\1\136\1\137\1\140\1\141"+
    "\3\26\1\142\3\26\1\143\1\26\1\144\3\26\1\145"+
    "\1\146\1\26\1\147\1\26\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\113"+
    "\0\u020d\0\113\0\113\0\u0258\0\u02a3\0\113\0\u02ee\0\u0339"+
    "\0\u0384\0\u03cf\0\u041a\0\113\0\113\0\u0465\0\u04b0\0\u04fb"+
    "\0\113\0\113\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672\0\u06bd"+
    "\0\u0708\0\113\0\u0753\0\113\0\113\0\u079e\0\u07e9\0\u0834"+
    "\0\u087f\0\u08ca\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c"+
    "\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u0c03\0\113\0\113\0\113"+
    "\0\113\0\u0c4e\0\u0753\0\113\0\u0c99\0\u0ce4\0\u0d2f\0\113"+
    "\0\u020d\0\113\0\u0d7a\0\113\0\113\0\113\0\113\0\u0dc5"+
    "\0\u0e10\0\u0e5b\0\113\0\u0ea6\0\u0ef1\0\113\0\113\0\113"+
    "\0\113\0\113\0\113\0\u0f3c\0\u0f87\0\u0fd2\0\u101d\0\u1068"+
    "\0\u10b3\0\u0753\0\u10fe\0\u1149\0\u1194\0\u11df\0\u122a\0\u1275"+
    "\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482\0\u14cd"+
    "\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u0546\0\u168f\0\u16da"+
    "\0\u1725\0\u1770\0\u0546\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7"+
    "\0\u1932\0\u197d\0\113\0\u19c8\0\113\0\u1a13\0\u1a13\0\u0ef1"+
    "\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20\0\u0546"+
    "\0\u1c6b\0\113\0\u1cb6\0\113\0\u1d01\0\u1d4c\0\u1d97\0\u1de2"+
    "\0\u1e2d\0\u1e78\0\u0546\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef"+
    "\0\u203a\0\u2085\0\u0546\0\u20d0\0\u211b\0\u2166\0\u21b1\0\u21fc"+
    "\0\u2247\0\u0546\0\u2292\0\u0546\0\u22dd\0\u2328\0\u2373\0\u23be"+
    "\0\u2409\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616"+
    "\0\u2661\0\u26ac\0\u26f7\0\u2742\0\u0546\0\u278d\0\u27d8\0\u0546"+
    "\0\u2823\0\u286e\0\u28b9\0\u2904\0\u294f\0\u299a\0\u0546\0\u0546"+
    "\0\u0546\0\u29e5\0\u2a30\0\u2a7b\0\u0546\0\u0546\0\u2ac6\0\u2b11"+
    "\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u0546"+
    "\0\u2d69\0\u2db4\0\u0546\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b"+
    "\0\u2f76\0\u0546\0\u2fc1\0\u0546\0\u300c\0\u3057\0\u30a2\0\u30ed"+
    "\0\u3138\0\u0546\0\u3183\0\u0546\0\u31ce\0\u3219\0\u3264\0\u0546"+
    "\0\u32af\0\u32fa\0\u3345\0\u3390\0\u33db\0\u3426\0\u3471\0\u34bc"+
    "\0\u3507\0\u3552\0\u359d\0\u35e8\0\u0546\0\u0546\0\u3633\0\u367e"+
    "\0\u36c9\0\u2f76\0\113\0\u3714\0\u375f\0\u0546\0\u37aa\0\u0546"+
    "\0\u3183\0\u37f5\0\u3840\0\u0546\0\u388b\0\u38d6\0\113\0\u3921"+
    "\0\u396c\0\u0546\0\u39b7\0\u3a02\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e"+
    "\0\u0546\0\u0546\0\u3b79\0\u0546\0\u3bc4\0\u0546\0\u0546\0\u3c0f"+
    "\0\u3c5a\0\u0546\0\u3ca5\0\u3cf0\0\u3d3b\0\u0546\0\u3d86\0\u3dd1"+
    "\0\u3e1c\0\u3e67\0\u0546\0\u3eb2\0\u0546\0\u0546\0\u0546\0\u0546"+
    "\0\u3efd\0\u3f48\0\u3f93\0\u0546\0\u3fde\0\u4029\0\u4074\0\u0546"+
    "\0\u40bf\0\u0546\0\u410a\0\u4155\0\u41a0\0\u0546\0\u0546\0\u41eb"+
    "\0\u0546\0\u4236\0\u0546";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\33\1\35\1\33\1\36\1\33"+
    "\1\37\1\33\1\40\1\41\1\33\1\42\1\43\1\44"+
    "\1\45\1\33\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\33\1\54\1\55\1\33\1\56\1\33\1\57\1\60"+
    "\1\61\1\62\1\63\1\33\1\64\1\65\3\33\1\66"+
    "\1\67\1\70\1\71\2\72\1\2\114\0\4\3\44\0"+
    "\1\73\36\0\2\72\31\0\1\74\62\0\2\75\1\0"+
    "\1\75\1\0\1\75\1\76\42\75\1\77\41\75\2\6"+
    "\3\0\103\6\1\0\1\6\31\0\1\100\62\0\2\101"+
    "\1\0\1\101\1\0\5\101\1\102\36\101\1\103\41\101"+
    "\15\0\1\104\12\0\1\105\112\0\1\106\112\0\1\107"+
    "\103\0\1\110\1\0\2\111\27\0\1\112\66\0\1\113"+
    "\103\0\1\111\1\0\2\23\13\0\1\114\6\0\1\115"+
    "\4\0\1\23\4\0\1\114\20\0\1\115\31\0\1\111"+
    "\1\0\2\23\13\0\1\114\13\0\1\23\4\0\1\114"+
    "\60\0\1\116\1\117\112\0\1\120\1\121\111\0\1\122"+
    "\1\123\104\0\2\33\7\0\14\33\4\0\30\33\32\0"+
    "\2\33\7\0\14\33\4\0\27\33\1\124\32\0\2\33"+
    "\7\0\14\33\4\0\27\33\1\125\32\0\2\33\7\0"+
    "\14\33\4\0\1\33\1\126\26\33\32\0\2\33\7\0"+
    "\14\33\4\0\1\33\1\127\26\33\32\0\2\33\7\0"+
    "\14\33\4\0\22\33\1\130\5\33\32\0\2\33\7\0"+
    "\14\33\4\0\20\33\1\131\7\33\10\0\1\73\1\132"+
    "\2\73\131\0\2\33\7\0\14\33\4\0\4\33\1\133"+
    "\10\33\1\134\3\33\1\135\6\33\15\0\1\136\3\0"+
    "\1\137\10\0\2\33\7\0\14\33\4\0\16\33\1\140"+
    "\1\33\1\141\6\33\1\142\32\0\2\33\7\0\14\33"+
    "\4\0\13\33\1\143\2\33\1\144\11\33\32\0\2\33"+
    "\7\0\14\33\4\0\5\33\1\145\22\33\32\0\2\33"+
    "\7\0\14\33\4\0\13\33\1\146\1\33\1\147\6\33"+
    "\1\150\1\33\1\151\1\33\32\0\2\33\7\0\14\33"+
    "\4\0\13\33\1\152\2\33\1\153\1\33\1\154\7\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\155\22\33"+
    "\32\0\2\33\7\0\14\33\4\0\6\33\1\156\5\33"+
    "\1\157\1\160\12\33\32\0\2\33\7\0\14\33\4\0"+
    "\16\33\1\161\11\33\32\0\2\33\7\0\14\33\4\0"+
    "\16\33\1\162\11\33\32\0\2\33\7\0\14\33\4\0"+
    "\20\33\1\163\7\33\32\0\2\33\7\0\14\33\4\0"+
    "\1\33\1\164\21\33\1\165\4\33\32\0\2\33\7\0"+
    "\14\33\4\0\1\33\1\166\3\33\1\167\22\33\32\0"+
    "\2\33\7\0\14\33\4\0\22\33\1\170\5\33\32\0"+
    "\2\33\7\0\14\33\4\0\11\33\1\171\16\33\32\0"+
    "\2\33\7\0\14\33\4\0\11\33\1\172\16\33\10\0"+
    "\4\72\103\0\2\72\1\0\2\75\1\0\1\75\1\0"+
    "\1\75\1\173\42\75\1\77\41\75\6\0\1\174\104\0"+
    "\2\75\3\0\103\75\1\0\1\75\1\0\2\101\3\0"+
    "\103\101\1\0\1\101\22\0\1\175\114\0\2\111\13\0"+
    "\1\114\13\0\1\111\4\0\1\114\54\0\2\112\13\0"+
    "\1\114\13\0\1\112\4\0\1\114\47\0\1\176\1\0"+
    "\1\176\2\0\2\177\27\0\1\177\61\0\2\200\7\0"+
    "\6\200\12\0\7\200\53\0\2\33\7\0\14\33\4\0"+
    "\22\33\1\201\5\33\32\0\2\33\7\0\14\33\4\0"+
    "\15\33\1\202\12\33\32\0\2\33\7\0\14\33\4\0"+
    "\13\33\1\203\14\33\32\0\2\33\7\0\14\33\4\0"+
    "\21\33\1\204\6\33\32\0\2\33\7\0\14\33\4\0"+
    "\20\33\1\205\7\33\32\0\2\33\7\0\14\33\4\0"+
    "\23\33\1\206\4\33\32\0\2\33\7\0\14\33\4\0"+
    "\4\33\1\207\23\33\32\0\2\33\7\0\14\33\4\0"+
    "\4\33\1\210\23\33\32\0\2\33\7\0\14\33\4\0"+
    "\21\33\1\211\6\33\7\0\2\136\1\0\1\136\1\0"+
    "\1\136\1\212\42\136\1\213\41\136\2\137\1\0\1\137"+
    "\1\0\5\137\1\214\36\137\1\215\41\137\23\0\2\33"+
    "\7\0\14\33\4\0\16\33\1\216\11\33\32\0\2\33"+
    "\7\0\14\33\4\0\5\33\1\217\22\33\32\0\2\33"+
    "\7\0\14\33\4\0\22\33\1\220\5\33\32\0\2\33"+
    "\7\0\14\33\4\0\5\33\1\221\22\33\32\0\2\33"+
    "\7\0\14\33\4\0\15\33\1\222\12\33\32\0\2\33"+
    "\7\0\14\33\4\0\6\33\1\223\10\33\1\224\10\33"+
    "\32\0\2\33\7\0\14\33\4\0\11\33\1\225\7\33"+
    "\1\226\6\33\32\0\2\33\7\0\14\33\4\0\23\33"+
    "\1\227\4\33\32\0\2\33\7\0\14\33\4\0\5\33"+
    "\1\230\22\33\32\0\2\33\7\0\14\33\4\0\22\33"+
    "\1\231\5\33\32\0\2\33\7\0\14\33\4\0\1\33"+
    "\1\232\26\33\32\0\2\33\7\0\14\33\4\0\20\33"+
    "\1\233\7\33\32\0\2\33\7\0\14\33\4\0\16\33"+
    "\1\234\11\33\32\0\2\33\7\0\14\33\4\0\26\33"+
    "\1\235\1\33\32\0\2\33\7\0\14\33\4\0\14\33"+
    "\1\236\2\33\1\237\10\33\32\0\2\33\7\0\14\33"+
    "\4\0\4\33\1\240\15\33\1\241\5\33\32\0\2\33"+
    "\7\0\14\33\4\0\7\33\1\242\20\33\32\0\2\33"+
    "\7\0\14\33\4\0\15\33\1\243\4\33\1\244\5\33"+
    "\32\0\2\33\7\0\14\33\4\0\21\33\1\245\5\33"+
    "\1\246\32\0\2\33\7\0\14\33\4\0\2\33\1\247"+
    "\15\33\1\250\7\33\32\0\2\33\7\0\14\33\4\0"+
    "\11\33\1\251\3\33\1\252\12\33\32\0\2\33\7\0"+
    "\14\33\4\0\22\33\1\253\5\33\32\0\2\33\7\0"+
    "\14\33\4\0\1\33\1\254\16\33\1\255\7\33\32\0"+
    "\2\33\7\0\14\33\4\0\15\33\1\256\12\33\32\0"+
    "\2\33\7\0\14\33\4\0\5\33\1\257\22\33\7\0"+
    "\6\174\1\260\104\174\23\0\2\177\27\0\1\177\61\0"+
    "\2\33\7\0\14\33\4\0\5\33\1\261\22\33\32\0"+
    "\2\33\7\0\1\262\13\33\4\0\30\33\32\0\2\33"+
    "\7\0\14\33\4\0\21\33\1\206\6\33\32\0\2\33"+
    "\7\0\14\33\4\0\10\33\1\263\17\33\32\0\2\33"+
    "\7\0\14\33\4\0\11\33\1\264\16\33\32\0\2\33"+
    "\7\0\14\33\4\0\5\33\1\265\22\33\32\0\2\33"+
    "\7\0\14\33\4\0\20\33\1\266\7\33\32\0\2\33"+
    "\7\0\14\33\4\0\5\33\1\267\22\33\7\0\2\136"+
    "\3\0\103\136\1\0\1\136\1\0\2\137\3\0\103\137"+
    "\1\0\1\137\24\0\2\33\7\0\14\33\4\0\13\33"+
    "\1\270\14\33\32\0\2\33\7\0\14\33\4\0\1\33"+
    "\1\271\26\33\32\0\2\33\7\0\14\33\4\0\5\33"+
    "\1\272\22\33\32\0\2\33\7\0\14\33\4\0\1\33"+
    "\1\273\26\33\32\0\2\33\7\0\14\33\4\0\21\33"+
    "\1\274\1\275\5\33\32\0\2\33\7\0\14\33\4\0"+
    "\13\33\1\276\14\33\32\0\2\33\7\0\14\33\4\0"+
    "\6\33\1\277\21\33\32\0\2\33\7\0\14\33\4\0"+
    "\5\33\1\300\22\33\32\0\2\33\7\0\14\33\4\0"+
    "\14\33\1\301\13\33\32\0\2\33\7\0\14\33\4\0"+
    "\15\33\1\302\12\33\32\0\2\33\7\0\14\33\4\0"+
    "\3\33\1\303\1\33\1\304\22\33\32\0\2\33\7\0"+
    "\14\33\4\0\7\33\1\305\20\33\32\0\2\33\7\0"+
    "\14\33\4\0\14\33\1\306\13\33\15\0\1\307\14\0"+
    "\2\33\7\0\14\33\4\0\30\33\32\0\2\33\7\0"+
    "\14\33\4\0\23\33\1\310\4\33\32\0\2\33\7\0"+
    "\14\33\4\0\13\33\1\311\2\33\1\312\11\33\32\0"+
    "\2\33\7\0\14\33\4\0\5\33\1\313\22\33\32\0"+
    "\2\314\7\0\14\33\4\0\5\33\1\315\22\33\32\0"+
    "\2\33\7\0\14\33\4\0\17\33\1\316\1\317\7\33"+
    "\32\0\2\33\7\0\14\33\4\0\21\33\1\320\6\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\321\26\33"+
    "\32\0\2\33\7\0\14\33\4\0\13\33\1\322\14\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\323\22\33"+
    "\32\0\2\33\7\0\14\33\4\0\21\33\1\324\6\33"+
    "\32\0\2\33\7\0\14\33\4\0\7\33\1\325\20\33"+
    "\32\0\2\33\7\0\14\33\4\0\23\33\1\326\4\33"+
    "\32\0\2\33\7\0\14\33\4\0\22\33\1\327\5\33"+
    "\32\0\2\33\7\0\14\33\4\0\23\33\1\330\4\33"+
    "\32\0\2\33\7\0\14\33\4\0\22\33\1\331\5\33"+
    "\32\0\2\33\7\0\14\33\4\0\25\33\1\332\2\33"+
    "\7\0\6\174\1\333\104\174\23\0\2\33\7\0\14\33"+
    "\4\0\21\33\1\334\6\33\32\0\2\33\7\0\14\33"+
    "\4\0\20\33\1\335\7\33\32\0\2\33\7\0\10\33"+
    "\1\336\3\33\4\0\30\33\32\0\2\33\7\0\14\33"+
    "\4\0\15\33\1\337\12\33\32\0\2\33\7\0\14\33"+
    "\4\0\5\33\1\340\22\33\32\0\2\33\7\0\14\33"+
    "\4\0\20\33\1\341\7\33\32\0\2\33\7\0\14\33"+
    "\4\0\12\33\1\342\15\33\32\0\2\33\7\0\14\33"+
    "\4\0\21\33\1\343\6\33\32\0\2\33\7\0\14\33"+
    "\4\0\20\33\1\344\7\33\32\0\2\33\7\0\14\33"+
    "\4\0\22\33\1\345\5\33\32\0\2\33\7\0\14\33"+
    "\4\0\11\33\1\346\16\33\32\0\2\33\7\0\14\33"+
    "\4\0\16\33\1\347\11\33\32\0\2\33\7\0\14\33"+
    "\4\0\22\33\1\350\5\33\32\0\2\33\7\0\14\33"+
    "\4\0\1\33\1\351\26\33\32\0\2\33\7\0\14\33"+
    "\4\0\20\33\1\352\7\33\32\0\2\353\7\0\6\353"+
    "\13\0\6\353\53\0\2\33\7\0\14\33\4\0\22\33"+
    "\1\354\5\33\32\0\2\33\7\0\14\33\4\0\5\33"+
    "\1\355\22\33\32\0\2\33\7\0\14\33\4\0\20\33"+
    "\1\356\7\33\32\0\2\33\7\0\14\33\4\0\26\33"+
    "\1\357\1\33\32\0\2\314\7\0\14\33\4\0\30\33"+
    "\32\0\2\33\7\0\14\33\4\0\20\33\1\360\7\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\361\26\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\362\22\33"+
    "\32\0\2\33\7\0\14\33\4\0\2\33\1\363\25\33"+
    "\32\0\2\33\7\0\14\33\4\0\11\33\1\364\16\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\365\22\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\366\22\33"+
    "\32\0\2\33\7\0\14\33\4\0\20\33\1\367\7\33"+
    "\32\0\2\33\7\0\14\33\4\0\11\33\1\370\16\33"+
    "\32\0\2\33\7\0\14\33\4\0\3\33\1\371\24\33"+
    "\32\0\2\372\7\0\14\33\4\0\30\33\7\0\6\174"+
    "\1\373\104\174\23\0\2\33\7\0\14\33\4\0\20\33"+
    "\1\374\7\33\32\0\2\33\7\0\14\33\4\0\1\33"+
    "\1\375\26\33\32\0\2\33\7\0\14\33\4\0\7\33"+
    "\1\376\20\33\32\0\2\33\7\0\14\33\4\0\21\33"+
    "\1\377\6\33\32\0\2\33\7\0\14\33\4\0\22\33"+
    "\1\u0100\5\33\32\0\2\u0101\7\0\14\33\4\0\30\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\u0102\26\33"+
    "\32\0\2\33\7\0\14\33\4\0\15\33\1\u0103\12\33"+
    "\32\0\2\33\7\0\14\33\4\0\27\33\1\u0104\32\0"+
    "\2\33\7\0\14\33\4\0\13\33\1\u0105\14\33\32\0"+
    "\2\33\7\0\14\33\4\0\15\33\1\u0106\12\33\15\0"+
    "\1\u0107\14\0\2\353\7\0\6\353\13\0\6\353\53\0"+
    "\2\33\7\0\14\33\4\0\1\33\1\u0108\26\33\32\0"+
    "\2\33\7\0\14\33\4\0\14\33\1\u0109\13\33\32\0"+
    "\2\33\7\0\14\33\4\0\22\33\1\u010a\5\33\32\0"+
    "\2\33\7\0\14\33\4\0\5\33\1\u010b\22\33\32\0"+
    "\2\33\7\0\14\33\4\0\6\33\1\u010c\6\33\1\u010d"+
    "\12\33\32\0\2\33\7\0\14\33\4\0\27\33\1\u010e"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\u010f\22\33"+
    "\32\0\2\33\7\0\14\33\4\0\13\33\1\u0110\14\33"+
    "\32\0\2\33\7\0\14\33\4\0\3\33\1\u0111\24\33"+
    "\32\0\2\33\7\0\14\33\4\0\15\33\1\u0112\12\33"+
    "\32\0\2\33\7\0\14\33\4\0\3\33\1\u0113\24\33"+
    "\32\0\2\33\7\0\14\33\4\0\22\33\1\u0114\5\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\u0115\26\33"+
    "\32\0\2\33\7\0\14\33\4\0\17\33\1\u0116\10\33"+
    "\32\0\2\33\7\0\14\33\4\0\21\33\1\u0117\6\33"+
    "\32\0\2\33\7\0\14\33\4\0\15\33\1\u0118\12\33"+
    "\32\0\2\33\7\0\14\33\4\0\23\33\1\u0119\4\33"+
    "\32\0\2\33\7\0\14\33\4\0\13\33\1\u011a\14\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\u011b\26\33"+
    "\32\0\2\33\7\0\14\33\4\0\2\33\1\u011c\25\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\u011d\22\33"+
    "\32\0\2\33\7\0\14\33\4\0\4\33\1\u011e\23\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\u011f\26\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\u0120\26\33"+
    "\32\0\2\33\7\0\14\33\4\0\1\33\1\u0121\26\33"+
    "\32\0\2\33\7\0\14\33\4\0\15\33\1\u0122\12\33"+
    "\32\0\2\33\7\0\14\33\4\0\5\33\1\u0123\22\33"+
    "\32\0\2\33\7\0\14\33\4\0\3\33\1\u0124\24\33"+
    "\32\0\2\33\7\0\14\33\4\0\27\33\1\u0125\32\0"+
    "\2\33\7\0\14\33\4\0\22\33\1\u0126\5\33\32\0"+
    "\2\33\7\0\14\33\4\0\5\33\1\u0127\22\33\32\0"+
    "\2\33\7\0\14\33\4\0\13\33\1\u0128\14\33\32\0"+
    "\2\33\7\0\14\33\4\0\13\33\1\u0129\14\33\32\0"+
    "\2\33\7\0\14\33\4\0\15\33\1\u012a\12\33\32\0"+
    "\2\33\7\0\14\33\4\0\3\33\1\u012b\24\33\32\0"+
    "\2\33\7\0\14\33\4\0\13\33\1\u012c\14\33\32\0"+
    "\2\33\7\0\14\33\4\0\2\33\1\u012d\25\33\32\0"+
    "\2\33\7\0\14\33\4\0\22\33\1\u012e\5\33\32\0"+
    "\2\33\7\0\14\33\4\0\1\33\1\u012f\26\33\32\0"+
    "\2\33\7\0\14\33\4\0\5\33\1\u0130\22\33\32\0"+
    "\2\33\7\0\14\33\4\0\22\33\1\u0131\5\33\32\0"+
    "\2\33\7\0\14\33\4\0\5\33\1\u0132\22\33\32\0"+
    "\2\33\7\0\14\33\4\0\13\33\1\u0133\14\33\32\0"+
    "\2\33\7\0\14\33\4\0\20\33\1\u0134\7\33\32\0"+
    "\2\33\7\0\14\33\4\0\13\33\1\u0135\14\33\32\0"+
    "\2\33\7\0\14\33\4\0\21\33\1\u0136\6\33\32\0"+
    "\2\33\7\0\14\33\4\0\5\33\1\u0137\22\33\32\0"+
    "\2\33\7\0\14\33\4\0\1\33\1\u0138\26\33\32\0"+
    "\2\33\7\0\14\33\4\0\13\33\1\u0139\14\33\32\0"+
    "\2\33\7\0\14\33\4\0\15\33\1\u013a\12\33\32\0"+
    "\2\33\7\0\14\33\4\0\22\33\1\u013b\5\33\7\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[17025];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\1\1\2\11\2\1\1\11"+
    "\5\1\2\11\3\1\2\11\7\1\1\11\1\1\2\11"+
    "\20\1\4\11\1\1\1\0\1\11\1\0\1\1\1\0"+
    "\1\11\1\0\1\11\1\0\4\11\1\0\1\1\1\0"+
    "\1\11\2\0\6\11\12\1\2\0\33\1\1\11\1\0"+
    "\1\11\1\0\13\1\1\11\1\0\1\11\1\0\42\1"+
    "\1\0\26\1\1\0\23\1\1\0\17\1\1\0\17\1"+
    "\1\11\13\1\1\11\64\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[315];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _BaseVyperLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BaseVyperLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 105: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 106: break;
          case 3:
            { return COMMENT;
            }
          // fall through
          case 107: break;
          case 4:
            { return PERCENT;
            }
          // fall through
          case 108: break;
          case 5:
            { return INTERSECTION;
            }
          // fall through
          case 109: break;
          case 6:
            { return LPAREN;
            }
          // fall through
          case 110: break;
          case 7:
            { return RPAREN;
            }
          // fall through
          case 111: break;
          case 8:
            { return MULT;
            }
          // fall through
          case 112: break;
          case 9:
            { return PLUS;
            }
          // fall through
          case 113: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 114: break;
          case 11:
            { return MINUS;
            }
          // fall through
          case 115: break;
          case 12:
            { return DOT;
            }
          // fall through
          case 116: break;
          case 13:
            { return DIV;
            }
          // fall through
          case 117: break;
          case 14:
            { return DECIMALNUMBER;
            }
          // fall through
          case 118: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 119: break;
          case 16:
            { return SEMICOLON;
            }
          // fall through
          case 120: break;
          case 17:
            { return LESS;
            }
          // fall through
          case 121: break;
          case 18:
            { return ASSIGN;
            }
          // fall through
          case 122: break;
          case 19:
            { return MORE;
            }
          // fall through
          case 123: break;
          case 20:
            { return QUESTION;
            }
          // fall through
          case 124: break;
          case 21:
            { return DECORATOR;
            }
          // fall through
          case 125: break;
          case 22:
            { return IDENTIFIER;
            }
          // fall through
          case 126: break;
          case 23:
            { return LBRACKET;
            }
          // fall through
          case 127: break;
          case 24:
            { return RBRACKET;
            }
          // fall through
          case 128: break;
          case 25:
            { return CARET;
            }
          // fall through
          case 129: break;
          case 26:
            { return LBRACE;
            }
          // fall through
          case 130: break;
          case 27:
            { return UNION;
            }
          // fall through
          case 131: break;
          case 28:
            { return RBRACE;
            }
          // fall through
          case 132: break;
          case 29:
            { return TILDE;
            }
          // fall through
          case 133: break;
          case 30:
            { return NEQ;
            }
          // fall through
          case 134: break;
          case 31:
            { return STRINGLITERALDOUBLE;
            }
          // fall through
          case 135: break;
          case 32:
            { return PERCENT_ASSIGN;
            }
          // fall through
          case 136: break;
          case 33:
            { return STRINGLITERALSINGLE;
            }
          // fall through
          case 137: break;
          case 34:
            { return EXPONENT;
            }
          // fall through
          case 138: break;
          case 35:
            { return MULT_ASSIGN;
            }
          // fall through
          case 139: break;
          case 36:
            { return PLUS_ASSIGN;
            }
          // fall through
          case 140: break;
          case 37:
            { return MINUS_ASSIGN;
            }
          // fall through
          case 141: break;
          case 38:
            { return FIXEDNUMBER;
            }
          // fall through
          case 142: break;
          case 39:
            { return DIV_ASSIGN;
            }
          // fall through
          case 143: break;
          case 40:
            { return LSHIFT;
            }
          // fall through
          case 144: break;
          case 41:
            { return LESSEQ;
            }
          // fall through
          case 145: break;
          case 42:
            { return EQ;
            }
          // fall through
          case 146: break;
          case 43:
            { return TO;
            }
          // fall through
          case 147: break;
          case 44:
            { return MOREEQ;
            }
          // fall through
          case 148: break;
          case 45:
            { return RSHIFT;
            }
          // fall through
          case 149: break;
          case 46:
            { return BREAK_LINE;
            }
          // fall through
          case 150: break;
          case 47:
            { return AS;
            }
          // fall through
          case 151: break;
          case 48:
            { return IF;
            }
          // fall through
          case 152: break;
          case 49:
            { return IN;
            }
          // fall through
          case 153: break;
          case 50:
            { return OR;
            }
          // fall through
          case 154: break;
          case 51:
            { return ELLIPSIS;
            }
          // fall through
          case 155: break;
          case 52:
            { return SCIENTIFICNUMBER;
            }
          // fall through
          case 156: break;
          case 53:
            { return HEXNUMBER;
            }
          // fall through
          case 157: break;
          case 54:
            { return AND;
            }
          // fall through
          case 158: break;
          case 55:
            { return STRINGLITERALDOUBLEB;
            }
          // fall through
          case 159: break;
          case 56:
            { return STRINGLITERALSINGLEB;
            }
          // fall through
          case 160: break;
          case 57:
            { return DEF;
            }
          // fall through
          case 161: break;
          case 58:
            { return FOR;
            }
          // fall through
          case 162: break;
          case 59:
            { return LOG;
            }
          // fall through
          case 163: break;
          case 60:
            { return NOT;
            }
          // fall through
          case 164: break;
          case 61:
            { return BOOLEANLITERAL;
            }
          // fall through
          case 165: break;
          case 62:
            { return BOOL;
            }
          // fall through
          case 166: break;
          case 63:
            { return ELIF;
            }
          // fall through
          case 167: break;
          case 64:
            { return ELSE;
            }
          // fall through
          case 168: break;
          case 65:
            { return ENUM;
            }
          // fall through
          case 169: break;
          case 66:
            { return FLAG;
            }
          // fall through
          case 170: break;
          case 67:
            { return FROM;
            }
          // fall through
          case 171: break;
          case 68:
            { return INTM;
            }
          // fall through
          case 172: break;
          case 69:
            { return PASS;
            }
          // fall through
          case 173: break;
          case 70:
            { return PURE;
            }
          // fall through
          case 174: break;
          case 71:
            { return VIEW;
            }
          // fall through
          case 175: break;
          case 72:
            { return BYTES;
            }
          // fall through
          case 176: break;
          case 73:
            { return BREAK;
            }
          // fall through
          case 177: break;
          case 74:
            { return CLEAR;
            }
          // fall through
          case 178: break;
          case 75:
            { return EVENT;
            }
          // fall through
          case 179: break;
          case 76:
            { return RAISE;
            }
          // fall through
          case 180: break;
          case 77:
            { return RANGE;
            }
          // fall through
          case 181: break;
          case 78:
            { return UINTM;
            }
          // fall through
          case 182: break;
          case 79:
            { return MULTILINESTRINGTOKEN;
            }
          // fall through
          case 183: break;
          case 80:
            { return STRING;
            }
          // fall through
          case 184: break;
          case 81:
            { return ASSERT;
            }
          // fall through
          case 185: break;
          case 82:
            { return BYTESM;
            }
          // fall through
          case 186: break;
          case 83:
            { return DEPLOY;
            }
          // fall through
          case 187: break;
          case 84:
            { return HEXLITERAL;
            }
          // fall through
          case 188: break;
          case 85:
            { return IMPORT;
            }
          // fall through
          case 189: break;
          case 86:
            { return PUBLIC;
            }
          // fall through
          case 190: break;
          case 87:
            { return RETURN;
            }
          // fall through
          case 191: break;
          case 88:
            { return STRUCT;
            }
          // fall through
          case 192: break;
          case 89:
            { return HASHMAP;
            }
          // fall through
          case 193: break;
          case 90:
            { return ADDRESS;
            }
          // fall through
          case 194: break;
          case 91:
            { return EXTCALL;
            }
          // fall through
          case 195: break;
          case 92:
            { return INDEXED;
            }
          // fall through
          case 196: break;
          case 93:
            { return PAYABLE;
            }
          // fall through
          case 197: break;
          case 94:
            { return DYNARRAY;
            }
          // fall through
          case 198: break;
          case 95:
            { return CONSTANT;
            }
          // fall through
          case 199: break;
          case 96:
            { return CONTINUE;
            }
          // fall through
          case 200: break;
          case 97:
            { return EXTERNAL;
            }
          // fall through
          case 201: break;
          case 98:
            { return INTERNAL;
            }
          // fall through
          case 202: break;
          case 99:
            { return IMMUTABLE;
            }
          // fall through
          case 203: break;
          case 100:
            { return INTERFACE;
            }
          // fall through
          case 204: break;
          case 101:
            { return IMPLEMENTS;
            }
          // fall through
          case 205: break;
          case 102:
            { return NONPAYABLE;
            }
          // fall through
          case 206: break;
          case 103:
            { return STATICCALL;
            }
          // fall through
          case 207: break;
          case 104:
            { return NONREENTRANT;
            }
          // fall through
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

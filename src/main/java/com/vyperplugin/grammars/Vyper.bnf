

{
tokens = [
   // simple
   //newline = "regexp:(\n|\r\n)"
   comment='regexp:(#.*)'
   space='regexp:\s+'
   SEMICOLON=';'
   COMMA=','
   DOT='.'
   COLON=':'
   LBRACKET='['
   RBRACKET=']'
   LBRACE='{'
   RBRACE='}'
   LPAREN='('
   RPAREN=')'
   IMPORT = 'import'
   FROM = 'from'

   // end simple

   // operators
   PLUS='+'
   MINUS='-'
   MULT='*'
   DIV='/'
   EXPONENT='**'
   NOT='not'
   ASSIGN='='
   TO='=>'
   EQ='=='
   NEQ='!='
   PLUS_ASSIGN='+='
   MINUS_ASSIGN='-='
   MULT_ASSIGN='*='
   DIV_ASSIGN='/='
   PERCENT_ASSIGN='%='
   LESS='<'
   LESSEQ='<='
   MORE='>'
   MOREEQ='>='
   CARET='^'
   AND='and'
   OR='or'
   QUESTION='?'
   PERCENT='%'
   TILDE='~'
   LSHIFT='<<'
   RSHIFT='>>'
   // end operators

   // literals
    hexLiteral='regexp:hex"([0-9a-fA-F]+)"'
    stringLiteralDouble='regexp:("([^"\r\n\\]|\\.)*")'
    stringLiteralDoubleB='regexp:(b"([^"\r\n\\]|\\.)*")'
    stringLiteralSingle="regexp:('([^'\r\n\\]|\\.)*')"
    stringLiteralSingleB="regexp:(b'([^'\r\n\\]|\\.)*')"
    decimalNumber='regexp:([0-9][_0-9]*)'
    fixedNumber='regexp:(([0-9][_0-9]*)+\.[_0-9]*|([0-9][_0-9]*)*\.([0-9][_0-9]*))'
    booleanLiteral='regexp:True|False'
    scientificNumber='regexp:((([0-9][_0-9]*)+|([0-9][_0-9]*)+\.[_0-9]*|([0-9][_0-9]*|[0-9])*\.[_0-9]+)[Ee][+-]?[_0-9]+)'
    hexNumber='regexp:(0[xX][_0-9a-fA-F]+)'
    // add language constansts

   // end literals



    Identifier='regexp:[a-zA-Z_$][a-zA-Z_$0-9]*'

    MultiLineStringToken =  'regexp:"""((?!""")[\d\D])*?"""'


   //end types




        // this is a special grammar for "preview only" because grammar-kit seems to not
        // support whitespaces
//    pragmaAll='regexp:[\^a-zA-Z_0-9.<>"]*'



]
extends(".*Expression") = Expression
}



// : External contract and struct declarations must come before event declarations, global declarations,
// and function definitions
SourceUnit ::= ( ImportDirective | UserDefinedConstantsExpression | ImplementsDirective
              | StructDefinition | UnitsDefinition | ExternalInterfaces  |  ContractDefinition  )*


UnitsDefinition ::= units ':''{'
     ( (Identifier ':' StringLiteral) ( ',' Identifier ':' StringLiteral)* )?
'}'  {
pin(".*") = 1
//программно чекать до след newLine наверное чтобы дать возможность дальше парситиь
}



UserDefinedConstantsExpression ::= Identifier ':' constant '(' TYPE')' '=' Expression  {
 pin=3
}

ImportDirective ::= ( import IMPORT_PATH as Identifier )
                   |( from  IMPORT_PATH import Identifier  ) {
pin(".*")=3
}
IMPORT_PATH ::= Identifier  ('.' Identifier)*

// implements statements
ImplementsDirective ::=  implements ':' Identifier (',' Identifier )*  {
pin=1
}

// external interfaces ok
ExternalInterfaces ::= contract Identifier ':'
                ( def Identifier '(' FunctionArgs? ')' ('->' TYPE)? ':' ExternalFunStatus )+ {pin=1}
ExternalFunStatus ::= modifying | constant
FunctionArgs ::= Identifier ':' TYPE ('=' Expression)?  (',' Identifier ':' TYPE ('=' Expression)? )*


// could be default assignment
StructDefinition ::= struct Identifier ':'
      LocalVariableDefinition+


ContractDefinition ::= (EventDeclaration | StateVariableDeclaration | FunctionDefinition)+

//ok
//Events must all come before global declarations and function definitions
EventDeclaration ::= Identifier ':' event '(' '{'   EventProperty? '}' ')'  {
pin=3
}
EventProperty ::= Identifier ':'    (IndexedData | TYPE)
                (',' Identifier ':' (IndexedData|TYPE)  )*

IndexedData ::= IndexedType '(' TYPE ')'

IndexedType ::= 'indexed'

// VARIABLES

// state varaibales  May not assign value whilst defining type
StateVariableDeclaration ::= Identifier ':'   (  StateVariableModifier '(' TYPE ')'  | TYPE )
// StateVariableModifier if omitted then it's private
StateVariableModifier ::= 'public'


// semantic : map could not be inside functions
LocalVariableDefinition ::=  ( LocalVariableDeclaration '=' Expression ) | LocalVariableDeclaration

LocalVariableDeclaration ::= Identifier ':' TYPE

MultiLineString ::=  MultiLineStringToken   {
 pin=1
}

// FUNCTIONS
FunctionDefinition ::=
    FunctionModifier
    def Identifier '(' FunctionArgs?  ')' ('->' TYPE)?':'
          MultiLineString?
          Statement* {
          pin=2
}

FunctionModifier ::= FunctionModifierOptional* FunctionModifierMandatory FunctionModifierOptional*
FunctionModifierMandatory ::= '@public' |  '@private'
FunctionModifierOptional ::= '@constant' | '@payable' | '@nonreentrant' '(' UNIQUE_KEY ')'
UNIQUE_KEY ::=  stringLiteralSingle | stringLiteralDouble

// statements
Statement ::= IfStatement | ForStatement | Continue | Break | Return |  Raise | EmitStatement | SimpleStatement | PassStatement

IfStatement ::= if  Expression ':'
                    Statement+
              (elif Expression ':' Statement+)*  (else ':' Statement+ )?
{
pin(".*")=1
}


private SimpleStatement ::= LocalVariableDefinition | ExpressionStatement
private ExpressionStatement ::= Expression

ForStatement ::= for Identifier in Expression ':' Statement+{
pin=1
}

Continue ::= continue

Break ::= break

Return ::= return Expression? {
pin=1
}
Raise ::= raise

EmitStatement ::= 'log.'FunctionCallExpression {
pin=1
}

PassStatement ::= pass

Expression ::=
  AssignmentExpression
  | FunctionCallExpression
  | CallExpression
  | ParenthesiziedExpression
  | NewExpression
  | AssertExpression
  | EqExpression
  | OrExpression
  | AndExpression
  | CompExpression
  | PlusMinExpression
  | MultDivExpression
  | ExponentExpression
  | UnaryExpression
  | ClearExpression
  | IndexAccessExpression
  | SelfAccessExpression
  | MemberAccessExpression
  | InlineArrayExpression
  | PrimaryExpression


//self function call?
SelfAccessExpression ::= self '.' Identifier

NewExpression ::= Identifier '(' '{' (  NewInitializerExpression
                             (',' NewInitializerExpression)*)? '}'  ')'
//add implekent and mixin
//}
NewInitializerExpression ::= NewExpression | (Identifier ':' Expression)

AssignmentExpression ::=
    Expression ('=' | '+=' | '-=' | '*=' | '/=' | '%=')
    Expression { rightAssociative=true  }
//??
CallExpression ::= Expression
                 ( ( '.' Identifier ) | ( '[' Expression ']' ) )*
                  '(' FunctionCallArguments? ')' ('(' FunctionCallArguments? ')')*

//??
FunctionCallExpression ::= (Identifier '(' FunctionCallArguments? ')') |
                           ( ( PrimaryExpression | NewExpression | TypeName  )
                           ( ( '.' Identifier ) | ( '[' Expression? ']' ) )*
                                     '(' FunctionCallArguments? ')' )  {
   //implements and mixin
}



  MemberAccessExpression ::= Expression '.' Identifier {
      pin = 2
     //implements and mixin
  }

IndexAccessExpression ::= Expression '[' Expression? ']'
ParenthesiziedExpression ::= '(' Expression ')' {pin=1}

ClearExpression ::= clear '(' Expression ')' {pin=1}


UnaryExpression ::=  ('NOT' | '~'  |  '+' | '-') Expression
InlineArrayExpression ::= '[' Expression (',' Expression)* ']'
AndExpression ::=  Expression 'AND' Expression
OrExpression ::= Expression 'OR' Expression
EqExpression ::= Expression ('==' | '!=') Expression
CompExpression ::= Expression ('<' | '>' | '<=' | '>=') Expression

PlusMinExpression ::= Expression ('+' | '-') Expression
MultDivExpression ::= Expression ('*' | '/' | '%') Expression
ExponentExpression ::= Expression '**' Expression

//multistring??
AssertExpression ::= assert Expression AssertMessage?
private AssertMessage ::= ',' (stringLiteralDouble| stringLiteralSingle | MultiLineString)

FunctionCallArguments ::= '{' NameValueList? '}'
                      | ExpressionList?

ExpressionList ::= Expression ( ',' Expression )*




PrimaryExpression ::= BooleanLiteral
                  | NumberLiteral
                  | HexLiteral
                  | StringLiteral
                  | Constants
                  | Identifier

               //   | ElementaryTypeNameExpression






// TYPES seems okay
TYPE ::=    ReferenceType| UnitType  |  ValueType | StructType

UnitType ::=    Timestamp | Timedelta | Wei_value | Wei | CustomUnitType
CustomUnitType ::= (Int128|UInt256) '(' Expression ')'
Timestamp ::= 'timestamp'
Timedelta ::= 'timedelta'
Wei_value ::= 'wei_value'
Wei ::= 'wei'

ValueType ::= BoolType | NumberType | AddressType | Byte32Type | BytesType | StringType

BoolType ::= 'bool'
NumberType ::= Int128 |UInt256 | DecimalNumber
Int128 ::= 'int128'
UInt256 ::= 'uint256'
AddressType ::= 'address'
Byte32Type ::= 'bytes32'
BytesType ::= 'bytes'   '[' (DecimalNumber | Identifier) ']'
StringType ::= 'string' '[' (DecimalNumber | Identifier) ']'



ReferenceType ::= ListType  | MapType

ListType ::= (UnitType| ValueType|StructType) '[' (DecimalNumber | Identifier) ']'
                    ('[' (DecimalNumber | Identifier) ']')*
StructType ::= Identifier
MapType ::= map  '(' (ValueType|UnitType)  ',' (ReferenceType |  UnitType|ValueType| StructType  ) ')' {
pin=1
}



// LITERALS seems works
BooleanLiteral ::= booleanLiteral

AddressLiteral ::= hexLiteral
NumberLiteral ::= HexNumber | DecimalNumber
StringLiteral ::= stringLiteralDouble | stringLiteralDoubleB | stringLiteralSingle | stringLiteralSingleB|MultiLineString
DecimalNumber ::= decimalNumber

//???
HexNumber ::= hexNumber
HexLiteral ::= hexLiteral

//Builtin Constants
Constants ::= ZERO_ADDRESS | EMPTY_BYTES32 | MAX_INT128 | MIN_INT128
             | MAX_DECIMAL | MIN_DECIMAL | MAX_UINT256


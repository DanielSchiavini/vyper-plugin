

Contract = (ImportDirective | ImplementsDirective | StructDefinition | ExternalInterfaces | ContractDefinition | UnitsDefinition | UserDefinedConstantsExpression)* 


// could be  declared in any point of file once
UnitsDefinition = 'units' '{'
     ( (Identifier ':' StringLiteral) ( ',' Identifier ':' StringLiteral)* )?
'}'


// could be  declared in any point of file once
UserDefinedConstantsExpression = Identifier ':' 'constant' '(' TYPE')' '=' Expression


//import
ImportDirective = 'import' StringLiteral 'as' Identifier
                | 'from'   StringLiteral 'import' Identifier



// implements statements
ImplementsDirective =  'implements' ':' Identifier



//structs
// could be default assignment
StructDefinition = 'struct' Identifier ':'
    LocalVariableDefinition*



// external interfaces
ExternalInterfaces = 'contract' Identifier ':'
       ( 'def' Identifier '(' FunctionArgs? ')' ('->' TYPE)? ':' ExternalFunStatus )+
ExternalFunStatus = 'modifying' | 'constant'
FunctionArgs = Identifier ':' TYPE  (',' Identifier ':' TYPE )*



ContractDefinition = (EventDeclaration | StateVariableDeclaration | FunctionDefinition)*

EventDeclaration = Identifier ':' 'event' '(' '{'   EventProperty? '}' ')'
EventProperty = Identifier ':' ValueType  (',' Identifier ':' ValueType)* 


// VARIABLES

// state varaibales  May not assign value whilst defining type
StateVariableDeclaration = Identifier ':'   (  StateVariableModifier '(' TYPE ')'  | TYPE )

// StateVariableModifier if omitted then it's private
StateVariableModifier = 'public' 


// semantic : map could not be inside functions
LocalVariableDefinition = LocalVariableDeclaration | LocalVariableDeclaration '=' Expression 
LocalVariableDeclaration = Identifier ':' TYPE 

// FUNCTIONS
FunctionDefinition = 
    FunctionModifier* 
    'def' Identifier '(' FunctionArgs?  ')' '->' TYPE':'
          Statement* 

FunctionModifier = '@public' |  '@private' | '@constant' | '@payable' | '@nonrentant' '(' UNIQUE_KEY ')'
UNIQUE_KEY = what is this???

// statements

Statement = IfStatement | ForStatement | Continue | Break | Return |  Raise | EmitStatement | SimpleStatement | PassStatement
IfStatement = 'if'  Expression ':'
                    Statement 
              ( ('else' ':' Statement ) | ('elif' Expression ':' Statement)* ) ?

SimpleStatement = LocalVariableDefinition | ExpressionStatement
ForStatement = 'for' Identifier 'in' Expression ':' Statement
Continue = 'continue'
Break = 'break'
Return = 'return' Expression?
Raise = 'raise'
EmitStatement = 'log.'FunctionCall
PassStatement = 'pass'


// Precedence by order (???)
Expression
 = IndexAccess
  | MemberAccess
  | FunctionCall
  | '(' Expression ')'
  |  ( ('!' | '~'  |  '+' | '-') Expression ) | ('clear' '(' Expression   ')' ) )
  | Expression '**' Expression
  | Expression ('*' | '/' | '%') Expression
  | Expression ('+' | '-') Expression
  | Expression ('<' | '>' | '<=' | '>=') Expression
  | Expression ('==' | '!=') Expression
  | Expression 'and' Expression
  | Expression 'or' Expression
  | Expression ( '=' |  '+=' | '-=' | '*=' | '/=' | '%=') Expression
  | PrimaryExpression


PrimaryExpression = BooleanLiteral
                  | NumberLiteral
                  | HexLiteral
                  | StringLiteral
                  | Identifier
               //   | ElementaryTypeNameExpression

MemberAccess = Expression '.' Identifier
IndexAccess = Expression '[' Expression? ']'


FunctionCall = Expression '(' FunctionCallArguments ')'
FunctionCallArguments = '{' NameValueList? '}'
                      | ExpressionList?
ExpressionList = Expression ( ',' Expression )*



// TYPES
TYPE = ValueType | UnitType | ReferenceType

UnitType =  CustomUnitType  | Timestamp | Timedelta | Wei
CustomUnitType = (Number) '(' Identifier ')'
Timestamp = 'timestamp'
Timedelta = 'timedelta'
Wei = 'wei'

ValueType = BoolType | NumberType | AddressType | UnitTypeType | Byte32Type | BytesType | StringType

BoolType = 'bool'
NumberType = 'uint256' | 'int128' | 'decimal'
AddressType = 'address'
Byte32Type = 'byte32'
BytesType = 'bytes'   '[' (DecimalNumber | Identifier) ']'
StringType = 'string' '[' (DecimalNumber | Identifier) ']'

ReferenceType = ListType | StructType | MapType
ListType = ValueType '[' (DecimalNumber | Identifier) ']'
StructType = Identifier
MapType = 'map' '(' ValueType  ',' (ValueType | ReferenceType ')'


// IDENTIFIER
Identifier = [a-zA-Z_$] [a-zA-Z_$0-9]*

// LITERALS
BooleanLiteral = 'True' | 'False'
AddressLiteral = HexNumber
StringLiteral = '"' ([^"\r\n\\] | '\\' .)* '"'
NumberLiteral = HexNumber | DecimalNumber  
DecimalNumber = [0-9]+ ( '.' [0-9]* )? ( [eE] [0-9]+ )?
HexNumber = '0' [xX] [0-9a-fA-F]+
HexLiteral = 'hex' ('"' ([0-9a-fA-F]{2})* '"' | '\'' ([0-9a-fA-F]{2})* '\'')

//Builtin Constants
Constants = 'ZERO_ADDRESS' | 'EMPTY_BYTES32' | 'MAX_INT128' | 'MIN_INT128' | 'MAX_DECIMAL' | 'MIN_DECIMAL' | 'MAX_UINT256'




/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.vyperplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.vyperplugin.psi.VyperTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_VyperLexer.flex</tt>
 */
public class _VyperLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\32\1\2\2\1\1\2\22\0\1\32\1\62\1\7\1\3\1\0\1\63\1\0\1\13\1\44\1\45"+
    "\1\55\1\54\1\36\1\27\1\16\1\56\1\30\1\104\1\105\1\111\1\14\1\107\1\110\1\14"+
    "\1\106\1\14\1\37\1\35\1\64\1\60\1\61\1\67\1\34\1\76\1\75\1\10\1\77\1\26\1"+
    "\22\1\33\1\100\1\120\2\33\1\121\1\115\1\103\1\113\1\116\1\33\1\101\1\114\1"+
    "\17\1\122\2\33\1\31\1\117\1\112\1\40\1\11\1\41\1\65\1\15\1\0\1\23\1\12\1\71"+
    "\1\66\1\5\1\53\1\74\1\4\1\46\1\33\1\102\1\24\1\47\1\57\1\51\1\50\1\33\1\20"+
    "\1\25\1\52\1\21\1\72\1\33\1\6\1\73\1\33\1\42\1\0\1\43\1\70\6\0\1\1\32\0\1"+
    "\32\337\0\1\32\177\0\13\32\35\0\2\1\5\0\1\32\57\0\1\32\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\4\1\1\1\4\1\1"+
    "\1\5\1\6\7\4\1\7\1\5\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\5\4"+
    "\1\22\1\23\1\24\1\4\1\25\1\26\1\1\1\27"+
    "\1\30\1\31\1\4\1\32\1\33\7\4\1\0\1\34"+
    "\3\0\3\4\2\0\1\35\1\0\1\36\1\0\7\4"+
    "\1\37\4\4\1\40\1\0\1\4\1\41\1\42\5\4"+
    "\1\43\3\4\1\44\1\45\1\46\1\47\1\4\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\13\4"+
    "\1\34\1\0\1\60\2\0\1\61\3\4\1\62\1\0"+
    "\11\4\1\63\3\4\1\64\2\4\1\65\7\4\1\66"+
    "\1\67\1\4\1\70\6\4\1\0\1\71\1\72\1\4"+
    "\1\0\1\4\1\73\1\4\1\74\21\4\1\75\1\4"+
    "\1\76\11\4\1\0\1\77\1\0\1\100\1\101\2\4"+
    "\1\102\1\103\1\4\1\104\14\4\1\105\1\4\1\106"+
    "\12\4\1\107\1\110\2\4\1\111\1\4\1\112\1\4"+
    "\1\113\1\114\2\4\1\115\1\116\2\4\1\117\14\4"+
    "\1\120\1\4\1\121\1\122\3\4\1\123\1\124\13\4"+
    "\1\125\4\4\1\126\1\127\1\130\11\4\1\131\11\4"+
    "\1\132\4\4\1\133\2\4\1\134\4\4\1\135\1\136"+
    "\1\137\1\4\1\140\1\4\1\141\1\142\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a\0\u04dd"+
    "\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\123\0\123\0\123"+
    "\0\123\0\123\0\123\0\123\0\123\0\123\0\123\0\u06cf"+
    "\0\u0722\0\u0775\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914\0\u0967"+
    "\0\u09ba\0\u0a0d\0\u0a60\0\u0ab3\0\u0b06\0\123\0\u0b59\0\123"+
    "\0\123\0\u0bac\0\u0bff\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b\0\u0d9e"+
    "\0\u0df1\0\u0e44\0\u0e97\0\u0eea\0\u0f3d\0\u0f90\0\u0fe3\0\u1036"+
    "\0\u02eb\0\u1089\0\123\0\u10dc\0\u112f\0\u1182\0\u11d5\0\u1228"+
    "\0\u127b\0\u12ce\0\u1321\0\u1374\0\u13c7\0\u141a\0\u146d\0\u14c0"+
    "\0\u1513\0\u1566\0\123\0\u15b9\0\u160c\0\u01f2\0\u165f\0\u16b2"+
    "\0\u1705\0\u1758\0\u17ab\0\u17fe\0\u01f2\0\u1851\0\u18a4\0\u18f7"+
    "\0\123\0\123\0\123\0\123\0\u194a\0\123\0\123\0\123"+
    "\0\123\0\123\0\123\0\123\0\123\0\u199d\0\u19f0\0\u1a43"+
    "\0\u1a96\0\u1ae9\0\u1b3c\0\u1b8f\0\u1be2\0\u1c35\0\u1c88\0\u1cdb"+
    "\0\123\0\u1d2e\0\123\0\u1d81\0\u1dd4\0\123\0\u1e27\0\u1e7a"+
    "\0\u1ecd\0\u1f20\0\u1f20\0\u1f73\0\u1fc6\0\u2019\0\u206c\0\u20bf"+
    "\0\u2112\0\u2165\0\u21b8\0\u220b\0\u01f2\0\u225e\0\u22b1\0\u2304"+
    "\0\u15b9\0\u2357\0\u23aa\0\u01f2\0\u23fd\0\u2450\0\u24a3\0\u24f6"+
    "\0\u2549\0\u259c\0\u25ef\0\u01f2\0\u01f2\0\u2642\0\u01f2\0\u2695"+
    "\0\u26e8\0\u273b\0\u278e\0\u27e1\0\u2834\0\u2887\0\u01f2\0\u01f2"+
    "\0\u28da\0\u292d\0\u2980\0\u01f2\0\u29d3\0\u01f2\0\u2a26\0\u2a79"+
    "\0\u2acc\0\u2b1f\0\u2b72\0\u2bc5\0\u2c18\0\u2c6b\0\u2cbe\0\u2d11"+
    "\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0\0\u2f03\0\u2f56\0\u01f2"+
    "\0\u2fa9\0\u01f2\0\u2ffc\0\u304f\0\u30a2\0\u30f5\0\u3148\0\u319b"+
    "\0\u31ee\0\u3241\0\u3294\0\u32e7\0\u01f2\0\u333a\0\u01f2\0\u338d"+
    "\0\u33e0\0\u3433\0\u01f2\0\u01f2\0\u3486\0\u01f2\0\u34d9\0\u352c"+
    "\0\u357f\0\u35d2\0\u3625\0\u3678\0\u36cb\0\u371e\0\u3771\0\u37c4"+
    "\0\u3817\0\u386a\0\u01f2\0\u38bd\0\u01f2\0\u3910\0\u3963\0\u39b6"+
    "\0\u3a09\0\u3a5c\0\u3aaf\0\u3b02\0\u3b55\0\u3ba8\0\u3bfb\0\123"+
    "\0\u333a\0\u3c4e\0\u3ca1\0\u01f2\0\u3cf4\0\u01f2\0\u3d47\0\u01f2"+
    "\0\u01f2\0\u3d9a\0\u3ded\0\u01f2\0\u01f2\0\u3e40\0\u3e93\0\u01f2"+
    "\0\u3ee6\0\u3f39\0\u3f8c\0\u3fdf\0\u4032\0\u4085\0\u40d8\0\u412b"+
    "\0\u417e\0\u41d1\0\u4224\0\u4277\0\u01f2\0\u42ca\0\u01f2\0\u01f2"+
    "\0\u431d\0\u4370\0\u43c3\0\u01f2\0\u01f2\0\u4416\0\u4469\0\u44bc"+
    "\0\u450f\0\u4562\0\u45b5\0\u4608\0\u465b\0\u46ae\0\u4701\0\u4754"+
    "\0\u01f2\0\u47a7\0\u47fa\0\u484d\0\u48a0\0\u01f2\0\u01f2\0\u01f2"+
    "\0\u48f3\0\u4946\0\u4999\0\u49ec\0\u4a3f\0\u4a92\0\u4ae5\0\u4b38"+
    "\0\u4b8b\0\u01f2\0\u4bde\0\u4c31\0\u4c84\0\u4cd7\0\u4d2a\0\u4d7d"+
    "\0\u4dd0\0\u4e23\0\u4e76\0\u01f2\0\u4ec9\0\u4f1c\0\u4f6f\0\u4fc2"+
    "\0\u01f2\0\u5015\0\u5068\0\u01f2\0\u50bb\0\u510e\0\u5161\0\u51b4"+
    "\0\u01f2\0\u01f2\0\u01f2\0\u5207\0\u01f2\0\u525a\0\u01f2\0\u01f2"+
    "\0\u01f2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\2\1\11\1\12\1\13\1\7\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\7\1\22\1\23\1\24\1\25"+
    "\1\7\1\3\1\7\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\7\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\3\7\1\63\6\7\6\13\1\64\2\7\1\65"+
    "\5\7\124\0\2\3\27\0\1\3\70\0\1\4\2\0"+
    "\120\4\4\0\1\7\1\66\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\5\7\1\67\2\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\1\7\1\70\30\7\4\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\2\71\1\0\4\71\1\72\1\71\1\73\111\71"+
    "\4\0\3\7\1\74\1\7\1\0\1\7\1\75\2\7"+
    "\1\0\1\7\1\76\6\7\1\0\2\7\1\0\1\7"+
    "\12\0\3\7\1\77\2\7\3\0\1\7\6\0\1\7"+
    "\2\0\2\7\1\100\27\7\2\101\1\0\6\101\1\102"+
    "\1\101\1\103\107\101\5\0\1\104\6\0\2\13\1\105"+
    "\7\0\1\104\1\0\1\13\53\0\6\13\25\0\1\105"+
    "\1\106\12\0\1\105\53\0\6\105\15\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\7\1\107"+
    "\6\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\2\7\1\110\27\7\4\0"+
    "\1\7\1\111\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\4\7\1\112\3\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\1\113\5\7\3\0\1\114\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\4\7\1\115\3\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\6\7\1\116\1\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\117\6\0\1\120\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\121\1\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\24\7\1\122\5\7"+
    "\60\0\1\123\47\0\1\104\1\124\5\0\2\13\1\105"+
    "\7\0\1\104\1\0\1\13\1\124\52\0\6\13\15\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\1\7\1\125"+
    "\3\7\1\126\3\0\1\127\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\4\7\1\130\3\7\1\0\2\7\1\0\1\7"+
    "\12\0\3\7\1\131\2\7\3\0\1\7\6\0\1\7"+
    "\2\0\32\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\1\132\1\133\1\7\1\134"+
    "\3\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\7\1\135"+
    "\6\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\7\1\136"+
    "\6\7\1\0\2\7\1\0\1\7\12\0\1\137\2\7"+
    "\1\140\2\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\60\0\1\141\117\0\1\142\2\0\1\143\122\0\1\144"+
    "\46\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\3\7"+
    "\1\145\2\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\60\0\1\146\1\147\121\0\1\150\1\151\121\0\1\152"+
    "\122\0\1\153\122\0\1\154\3\0\1\155\42\0\1\7"+
    "\1\156\1\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\5\7"+
    "\1\157\2\7\1\0\2\7\1\0\1\7\12\0\3\7"+
    "\1\160\2\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\5\7\1\161\24\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\7\7\1\162\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\5\7\1\163\21\7\1\164"+
    "\2\7\4\0\2\7\1\165\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\6\7\1\166\1\7\1\0\2\7\1\0\1\7"+
    "\12\0\1\167\5\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\1\7\1\170\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\2\71\1\0\4\71\1\171\1\71\1\73\111\71"+
    "\7\0\1\172\113\0\1\71\2\0\120\71\2\74\1\0"+
    "\4\74\1\173\1\74\1\174\111\74\2\75\1\0\6\75"+
    "\1\175\1\75\1\176\107\75\4\0\1\7\1\177\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\3\7\1\200\2\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\201\1\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\1\101\2\0\120\101\14\0"+
    "\2\202\11\0\1\203\1\202\23\0\1\203\27\0\6\202"+
    "\16\0\1\104\6\0\2\105\10\0\1\104\1\0\1\105"+
    "\53\0\6\105\16\0\1\104\6\0\2\106\10\0\1\104"+
    "\1\0\1\106\53\0\6\106\15\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\204\5\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\2\7\1\205\3\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\206\1\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\1\207\5\7\3\0\1\210\6\0"+
    "\1\7\2\0\32\7\4\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\211\6\0\1\7\2\0"+
    "\32\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\1\212\5\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\5\7\1\213\2\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\6\7\1\214\1\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\215\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\216\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\1\7\1\217\6\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\25\7\1\220\4\7\5\0\1\221\2\0\1\221"+
    "\1\0\1\221\1\0\2\221\4\0\2\221\2\0\1\221"+
    "\1\0\1\221\22\0\1\221\12\0\1\221\2\0\1\221"+
    "\3\0\3\221\4\0\6\221\15\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\2\7\1\222\3\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\223\1\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\2\7\1\224\3\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\225"+
    "\2\0\32\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\1\226\5\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\3\7\1\0\1\7\1\0\1\227\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\6\7\1\230\1\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\2\7\1\231"+
    "\27\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\232\2\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\2\7\1\233\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\1\234\6\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\235\1\7\3\0\1\236\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\5\7"+
    "\1\237\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\1\7\1\240\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\241\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\6\7\1\242\23\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\10\7\1\243\21\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\1\7\1\244\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\12\7\1\245\17\7\4\0\3\7\1\246\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\32\7\4\0\1\7\1\247\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\32\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\5\7\1\250\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\251\6\0\1\7\2\0\32\7\7\172"+
    "\1\252\113\172\1\74\2\0\120\74\1\75\2\0\120\75"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\4\7\1\253\3\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\5\7\1\254\2\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\1\7\1\255\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\14\0\2\202\12\0\1\202\53\0\6\202\15\0\1\7"+
    "\1\256\1\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\1\7"+
    "\1\257\1\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\260\5\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\6\7"+
    "\1\261\1\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\3\7\1\262\26\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\4\7\1\263\1\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\4\7\1\264\1\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\6\7"+
    "\1\204\1\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\1\7"+
    "\1\265\1\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7"+
    "\1\266\6\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\267\5\7\1\0\2\7\1\0\1\7\12\0\1\270"+
    "\5\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\1\271\7\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\5\7"+
    "\1\272\2\7\1\0\2\7\1\0\1\7\12\0\3\7"+
    "\1\273\2\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\13\7\1\274\16\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\1\275"+
    "\5\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\1\7\1\276\30\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\5\7\1\277\2\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\6\7\1\300\1\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\4\7\1\301\3\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\1\7\1\302"+
    "\4\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\1\7\1\303\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\1\7\1\304\6\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\4\7\1\305\3\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\6\7\1\306\1\7\1\0\2\7\1\0\1\7\12\0"+
    "\4\7\1\307\1\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\310\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\22\7\1\311\7\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\312\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\1\7\1\313"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\5\0\1\314"+
    "\2\0\1\314\1\0\1\314\1\0\1\314\5\0\2\314"+
    "\2\0\1\314\1\0\1\314\22\0\1\314\12\0\1\314"+
    "\2\0\1\314\3\0\3\314\4\0\6\314\15\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\4\7\1\315\1\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\7\172\1\316"+
    "\113\172\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\11\7\1\317"+
    "\20\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\6\7\1\320\1\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\12\7\1\321"+
    "\17\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\1\7\1\322\6\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\1\7\1\323\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\1\7\1\324\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\14\7\1\325"+
    "\15\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\6\7\1\326\1\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\1\7\1\327\6\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\1\7\1\330\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\1\331\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\332\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\26\7\1\333\3\7\4\0\1\7"+
    "\1\334\1\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7"+
    "\1\335\6\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\14\7\1\336\15\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\5\7\1\337\3\0"+
    "\1\7\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\4\7\1\340"+
    "\3\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\1\341\5\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\342\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\32\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\343\2\0\32\7"+
    "\4\0\1\7\1\344\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\1\345\6\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\346\1\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\1\347\6\7\1\0\2\7\1\0\1\7"+
    "\12\0\1\350\5\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\3\7\1\0\1\351\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\1\7\1\352"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\6\7\1\353\20\7\1\354\1\7"+
    "\1\355\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\6\7\1\356"+
    "\20\7\1\357\2\7\5\0\1\314\1\0\1\360\1\314"+
    "\1\0\1\314\1\0\1\314\5\0\2\314\2\0\1\314"+
    "\1\0\1\314\22\0\1\314\12\0\1\314\2\0\1\314"+
    "\3\0\3\314\4\0\6\314\11\0\7\172\1\361\113\172"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\20\7\1\362\11\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\4\7\1\363\3\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\364\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\16\7\1\365\13\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\4\7\1\366\1\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\6\7"+
    "\1\367\1\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\4\7\1\370\1\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\3\7\1\371\26\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\372\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\373\4\7\3\0"+
    "\1\7\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\374\1\7\3\0"+
    "\1\7\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\15\7\1\375\14\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\2\7\1\376\27\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\377\1\7\3\0"+
    "\1\7\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\1\u0100\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\5\7\1\u0101\2\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\1\7\1\u0102\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\4\7\1\u0103\3\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\4\7\1\u0104\3\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\u0105\6\0\1\7"+
    "\2\0\32\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\7\7"+
    "\1\u0106\22\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\5\7"+
    "\1\u0107\24\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\7\7\1\u0108\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\32\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\12\7\1\u0109"+
    "\17\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\27\7\1\u010a"+
    "\2\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\7\7\1\u010b\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\12\7\1\u010c\17\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\14\7\1\u010d\15\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\u010e\4\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\17\7\1\u010f\12\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\6\7\1\u0110\1\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\4\7\1\u0111\25\7"+
    "\4\0\1\7\1\u0112\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\1\u0113"+
    "\5\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\1\7\1\u0114\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\1\7\1\u0115\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\u0116\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\u0117\6\0"+
    "\1\7\2\0\32\7\4\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\1\u0118\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\u0119\5\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\32\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\5\7"+
    "\1\u011a\24\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\6\7"+
    "\1\u011b\23\7\4\0\3\7\1\0\1\u011c\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\u011d\7\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\12\7\1\u011e\17\7\4\0"+
    "\3\7\1\0\1\u011f\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\u0120\7\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\1\7\1\u0121\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\32\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\26\7\1\u0122\3\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\u0123\6\0\1\7"+
    "\2\0\32\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\u0124\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\u0125\1\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\u0126\1\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\u0127\1\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\1\7\1\u0128\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\10\7\1\u0129\21\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\6\7\1\u012a\23\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\27\7\1\u012b\2\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\13\7\1\u012c\16\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\u012d\7\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\27\7\1\u012e\2\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\13\7\1\u012f\16\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\1\u0130\7\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\4\7\1\u0131\1\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\3\7\1\u0132\26\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7"+
    "\1\u0133\6\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\5\7\1\u0134\24\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\10\7\1\u0135\21\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\24\7\1\u0136\5\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\14\7\1\u0137\15\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\14\7\1\u0138\15\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\24\7\1\u0139\5\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\14\7\1\u013a\15\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\7\7"+
    "\1\u013b\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\6\7\1\u013c"+
    "\1\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\4\7\1\u013d"+
    "\3\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\32\7\4\0\3\7\1\0"+
    "\1\u013e\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\32\7\4\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\7\7\1\u013f\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\32\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\5\7"+
    "\1\u0140\24\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\15\7"+
    "\1\u0141\14\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\16\7"+
    "\1\u0142\13\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\5\7"+
    "\1\u0143\24\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\15\7"+
    "\1\u0144\14\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\23\7"+
    "\1\u0145\6\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\u0146\6\0\1\7\2\0\32\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\u0147\7\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\23\7\1\u0148\6\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\30\7\1\u0149\1\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\17\7\1\u014a\12\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\30\7\1\u014b\1\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\20\7\1\u014c\11\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\4\7\1\u014d"+
    "\1\7\3\0\1\7\6\0\1\7\2\0\32\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\7\7\1\u014e\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\32\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\23\7\1\u014f\6\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\14\7\1\u0150\15\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\10\7\1\u0151\21\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21165];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\12\11\16\1\1\11\1\1\2\11"+
    "\7\1\1\0\1\1\3\0\3\1\2\0\1\11\1\0"+
    "\1\1\1\0\14\1\1\11\1\0\14\1\4\11\1\1"+
    "\10\11\13\1\1\11\1\0\1\11\2\0\1\11\4\1"+
    "\1\0\42\1\1\0\3\1\1\0\41\1\1\0\1\1"+
    "\1\0\41\1\1\11\141\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _VyperLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VyperLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 99: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 100: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 101: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 102: break;
          case 5: 
            { return DECIMALNUMBER;
            } 
            // fall through
          case 103: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 104: break;
          case 7: 
            { return MINUS;
            } 
            // fall through
          case 105: break;
          case 8: 
            { return DECORATOR;
            } 
            // fall through
          case 106: break;
          case 9: 
            { return SEMICOLON;
            } 
            // fall through
          case 107: break;
          case 10: 
            { return COMMA;
            } 
            // fall through
          case 108: break;
          case 11: 
            { return COLON;
            } 
            // fall through
          case 109: break;
          case 12: 
            { return LBRACKET;
            } 
            // fall through
          case 110: break;
          case 13: 
            { return RBRACKET;
            } 
            // fall through
          case 111: break;
          case 14: 
            { return LBRACE;
            } 
            // fall through
          case 112: break;
          case 15: 
            { return RBRACE;
            } 
            // fall through
          case 113: break;
          case 16: 
            { return LPAREN;
            } 
            // fall through
          case 114: break;
          case 17: 
            { return RPAREN;
            } 
            // fall through
          case 115: break;
          case 18: 
            { return PLUS;
            } 
            // fall through
          case 116: break;
          case 19: 
            { return MULT;
            } 
            // fall through
          case 117: break;
          case 20: 
            { return DIV;
            } 
            // fall through
          case 118: break;
          case 21: 
            { return ASSIGN;
            } 
            // fall through
          case 119: break;
          case 22: 
            { return MORE;
            } 
            // fall through
          case 120: break;
          case 23: 
            { return PERCENT;
            } 
            // fall through
          case 121: break;
          case 24: 
            { return LESS;
            } 
            // fall through
          case 122: break;
          case 25: 
            { return CARET;
            } 
            // fall through
          case 123: break;
          case 26: 
            { return QUESTION;
            } 
            // fall through
          case 124: break;
          case 27: 
            { return TILDE;
            } 
            // fall through
          case 125: break;
          case 28: 
            { return STRINGLITERALDOUBLE;
            } 
            // fall through
          case 126: break;
          case 29: 
            { return STRINGLITERALSINGLE;
            } 
            // fall through
          case 127: break;
          case 30: 
            { return FIXEDNUMBER;
            } 
            // fall through
          case 128: break;
          case 31: 
            { return AS;
            } 
            // fall through
          case 129: break;
          case 32: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 130: break;
          case 33: 
            { return IF;
            } 
            // fall through
          case 131: break;
          case 34: 
            { return IN;
            } 
            // fall through
          case 132: break;
          case 35: 
            { return OR;
            } 
            // fall through
          case 133: break;
          case 36: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 134: break;
          case 37: 
            { return EXPONENT;
            } 
            // fall through
          case 135: break;
          case 38: 
            { return MULT_ASSIGN;
            } 
            // fall through
          case 136: break;
          case 39: 
            { return DIV_ASSIGN;
            } 
            // fall through
          case 137: break;
          case 40: 
            { return EQ;
            } 
            // fall through
          case 138: break;
          case 41: 
            { return TO;
            } 
            // fall through
          case 139: break;
          case 42: 
            { return MOREEQ;
            } 
            // fall through
          case 140: break;
          case 43: 
            { return RSHIFT;
            } 
            // fall through
          case 141: break;
          case 44: 
            { return NEQ;
            } 
            // fall through
          case 142: break;
          case 45: 
            { return PERCENT_ASSIGN;
            } 
            // fall through
          case 143: break;
          case 46: 
            { return LESSEQ;
            } 
            // fall through
          case 144: break;
          case 47: 
            { return LSHIFT;
            } 
            // fall through
          case 145: break;
          case 48: 
            { return STRINGLITERALDOUBLEB;
            } 
            // fall through
          case 146: break;
          case 49: 
            { return STRINGLITERALSINGLEB;
            } 
            // fall through
          case 147: break;
          case 50: 
            { return SCIENTIFICNUMBER;
            } 
            // fall through
          case 148: break;
          case 51: 
            { return AND;
            } 
            // fall through
          case 149: break;
          case 52: 
            { return HEXNUMBER;
            } 
            // fall through
          case 150: break;
          case 53: 
            { return MAP;
            } 
            // fall through
          case 151: break;
          case 54: 
            { return FOR;
            } 
            // fall through
          case 152: break;
          case 55: 
            { return NOT;
            } 
            // fall through
          case 153: break;
          case 56: 
            { return DEF;
            } 
            // fall through
          case 154: break;
          case 57: 
            { return ELSE;
            } 
            // fall through
          case 155: break;
          case 58: 
            { return ELIF;
            } 
            // fall through
          case 156: break;
          case 59: 
            { return BOOL;
            } 
            // fall through
          case 157: break;
          case 60: 
            { return BOOLEANLITERAL;
            } 
            // fall through
          case 158: break;
          case 61: 
            { return PASS;
            } 
            // fall through
          case 159: break;
          case 62: 
            { return FROM;
            } 
            // fall through
          case 160: break;
          case 63: 
            { return EVENT;
            } 
            // fall through
          case 161: break;
          case 64: 
            { return BREAK;
            } 
            // fall through
          case 162: break;
          case 65: 
            { return BYTES;
            } 
            // fall through
          case 163: break;
          case 66: 
            { return RAISE;
            } 
            // fall through
          case 164: break;
          case 67: 
            { return RANGE;
            } 
            // fall through
          case 165: break;
          case 68: 
            { return UNITS;
            } 
            // fall through
          case 166: break;
          case 69: 
            { return FIXED;
            } 
            // fall through
          case 167: break;
          case 70: 
            { return CLEAR;
            } 
            // fall through
          case 168: break;
          case 71: 
            { return HEXLITERAL;
            } 
            // fall through
          case 169: break;
          case 72: 
            { return MULTILINESTRINGTOKEN;
            } 
            // fall through
          case 170: break;
          case 73: 
            { return RETURN;
            } 
            // fall through
          case 171: break;
          case 74: 
            { return ASSERT;
            } 
            // fall through
          case 172: break;
          case 75: 
            { return STRUCT;
            } 
            // fall through
          case 173: break;
          case 76: 
            { return STRING;
            } 
            // fall through
          case 174: break;
          case 77: 
            { return IMPORT;
            } 
            // fall through
          case 175: break;
          case 78: 
            { return INT128;
            } 
            // fall through
          case 176: break;
          case 79: 
            { return PUBLIC;
            } 
            // fall through
          case 177: break;
          case 80: 
            { return BYTES32;
            } 
            // fall through
          case 178: break;
          case 81: 
            { return UINT256;
            } 
            // fall through
          case 179: break;
          case 82: 
            { return ADDRESS;
            } 
            // fall through
          case 180: break;
          case 83: 
            { return PRIVATE;
            } 
            // fall through
          case 181: break;
          case 84: 
            { return PAYABLE;
            } 
            // fall through
          case 182: break;
          case 85: 
            { return TYPENAME;
            } 
            // fall through
          case 183: break;
          case 86: 
            { return CONSTANT;
            } 
            // fall through
          case 184: break;
          case 87: 
            { return CONTRACT;
            } 
            // fall through
          case 185: break;
          case 88: 
            { return CONTINUE;
            } 
            // fall through
          case 186: break;
          case 89: 
            { return MODIFYING;
            } 
            // fall through
          case 187: break;
          case 90: 
            { return IMPLEMENTS;
            } 
            // fall through
          case 188: break;
          case 91: 
            { return MAX_INT128;
            } 
            // fall through
          case 189: break;
          case 92: 
            { return MIN_INT128;
            } 
            // fall through
          case 190: break;
          case 93: 
            { return MAX_DECIMAL;
            } 
            // fall through
          case 191: break;
          case 94: 
            { return MAX_UINT256;
            } 
            // fall through
          case 192: break;
          case 95: 
            { return MIN_DECIMAL;
            } 
            // fall through
          case 193: break;
          case 96: 
            { return NONREENTRANT;
            } 
            // fall through
          case 194: break;
          case 97: 
            { return ZERO_ADDRESS;
            } 
            // fall through
          case 195: break;
          case 98: 
            { return EMPTY_BYTES32;
            } 
            // fall through
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

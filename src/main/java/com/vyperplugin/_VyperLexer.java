/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.vyperplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.vyperplugin.psi.VyperTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_VyperLexer.flex</tt>
 */
public class _VyperLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\32\1\2\2\1\1\2\22\0\1\32\1\62\1\7\1\3\1\0\1\63\1\0\1\13\1\44\1\45"+
    "\1\55\1\54\1\36\1\27\1\16\1\56\1\30\1\77\1\100\1\104\1\14\1\102\1\103\1\14"+
    "\1\101\1\14\1\37\1\35\1\64\1\60\1\61\1\67\1\34\1\110\1\116\1\10\1\111\1\26"+
    "\1\22\2\33\1\117\2\33\1\120\1\113\1\76\1\107\1\114\1\33\1\106\1\112\1\17\1"+
    "\121\2\33\1\31\1\115\1\105\1\40\1\11\1\41\1\65\1\15\1\0\1\23\1\12\1\71\1\66"+
    "\1\5\1\53\1\74\1\4\1\46\1\33\1\75\1\24\1\47\1\57\1\51\1\50\1\33\1\20\1\25"+
    "\1\52\1\21\1\72\1\33\1\6\1\73\1\33\1\42\1\0\1\43\1\70\6\0\1\1\32\0\1\32\337"+
    "\0\1\32\177\0\13\32\35\0\2\1\5\0\1\32\57\0\1\32\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\4\1\1\1\4\1\1"+
    "\1\5\1\6\7\4\1\7\1\5\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\5\4"+
    "\1\22\1\23\1\24\1\4\1\25\1\26\1\1\1\27"+
    "\1\30\1\31\1\4\1\32\1\33\6\4\1\0\1\34"+
    "\3\0\3\4\2\0\1\35\1\0\1\36\1\0\7\4"+
    "\1\37\5\4\1\40\1\0\1\4\1\41\1\42\5\4"+
    "\1\43\3\4\1\44\1\45\1\46\1\47\1\4\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\12\4"+
    "\1\34\1\0\1\60\2\0\1\61\3\4\1\62\1\0"+
    "\11\4\1\63\4\4\1\64\2\4\1\65\7\4\1\66"+
    "\1\67\1\4\1\70\5\4\1\0\1\71\1\72\1\4"+
    "\1\0\1\4\1\73\1\4\1\74\10\4\1\75\11\4"+
    "\1\76\1\4\1\77\10\4\1\0\1\100\1\0\1\101"+
    "\3\4\1\102\1\103\1\4\1\104\14\4\1\105\1\4"+
    "\1\106\11\4\1\107\1\110\2\4\1\111\1\4\1\112"+
    "\1\4\1\113\1\114\2\4\1\115\1\116\2\4\1\117"+
    "\13\4\1\120\1\4\1\121\1\122\3\4\1\123\1\124"+
    "\12\4\1\125\4\4\1\126\1\127\1\130\10\4\1\131"+
    "\10\4\1\132\3\4\1\133\2\4\1\134\3\4\1\135"+
    "\1\136\1\137\1\4\1\140\1\141\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\u02e2\0\u0334\0\u0386\0\u03d8\0\u042a\0\u047c\0\u04ce"+
    "\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\122\0\122\0\122"+
    "\0\122\0\122\0\122\0\122\0\122\0\122\0\122\0\u06ba"+
    "\0\u070c\0\u075e\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8\0\u094a"+
    "\0\u099c\0\u09ee\0\u0a40\0\u0a92\0\u0ae4\0\122\0\u0b36\0\122"+
    "\0\122\0\u0b88\0\u0bda\0\u0c2c\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74"+
    "\0\u0dc6\0\u0e18\0\u0e6a\0\u0ebc\0\u0f0e\0\u0f60\0\u0fb2\0\u02e2"+
    "\0\u1004\0\122\0\u1056\0\u10a8\0\u10fa\0\u114c\0\u119e\0\u11f0"+
    "\0\u1242\0\u1294\0\u12e6\0\u1338\0\u138a\0\u13dc\0\u142e\0\u1480"+
    "\0\u14d2\0\u1524\0\122\0\u1576\0\u15c8\0\u01ec\0\u161a\0\u166c"+
    "\0\u16be\0\u1710\0\u1762\0\u17b4\0\u01ec\0\u1806\0\u1858\0\u18aa"+
    "\0\122\0\122\0\122\0\122\0\u18fc\0\122\0\122\0\122"+
    "\0\122\0\122\0\122\0\122\0\122\0\u194e\0\u19a0\0\u19f2"+
    "\0\u1a44\0\u1a96\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30\0\122"+
    "\0\u1c82\0\122\0\u1cd4\0\u1d26\0\122\0\u1d78\0\u1dca\0\u1e1c"+
    "\0\u1e6e\0\u1e6e\0\u1ec0\0\u1f12\0\u1f64\0\u1fb6\0\u2008\0\u205a"+
    "\0\u20ac\0\u20fe\0\u2150\0\u01ec\0\u21a2\0\u21f4\0\u2246\0\u2298"+
    "\0\u1576\0\u22ea\0\u233c\0\u01ec\0\u238e\0\u23e0\0\u2432\0\u2484"+
    "\0\u24d6\0\u2528\0\u257a\0\u01ec\0\u01ec\0\u25cc\0\u01ec\0\u261e"+
    "\0\u2670\0\u26c2\0\u2714\0\u2766\0\u27b8\0\u01ec\0\u01ec\0\u280a"+
    "\0\u285c\0\u28ae\0\u01ec\0\u2900\0\u01ec\0\u2952\0\u29a4\0\u29f6"+
    "\0\u2a48\0\u2a9a\0\u2aec\0\u2b3e\0\u2b90\0\u01ec\0\u2be2\0\u2c34"+
    "\0\u2c86\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce\0\u2e20\0\u2e72\0\u01ec"+
    "\0\u2ec4\0\u01ec\0\u2f16\0\u2f68\0\u2fba\0\u300c\0\u305e\0\u30b0"+
    "\0\u3102\0\u3154\0\u31a6\0\u01ec\0\u31f8\0\u01ec\0\u324a\0\u329c"+
    "\0\u32ee\0\u01ec\0\u01ec\0\u3340\0\u01ec\0\u3392\0\u33e4\0\u3436"+
    "\0\u3488\0\u34da\0\u352c\0\u357e\0\u35d0\0\u3622\0\u3674\0\u36c6"+
    "\0\u3718\0\u01ec\0\u376a\0\u01ec\0\u37bc\0\u380e\0\u3860\0\u38b2"+
    "\0\u3904\0\u3956\0\u39a8\0\u39fa\0\u3a4c\0\122\0\u31f8\0\u3a9e"+
    "\0\u3af0\0\u01ec\0\u3b42\0\u01ec\0\u3b94\0\u01ec\0\u01ec\0\u3be6"+
    "\0\u3c38\0\u01ec\0\u01ec\0\u3c8a\0\u3cdc\0\u01ec\0\u3d2e\0\u3d80"+
    "\0\u3dd2\0\u3e24\0\u3e76\0\u3ec8\0\u3f1a\0\u3f6c\0\u3fbe\0\u4010"+
    "\0\u4062\0\u01ec\0\u40b4\0\u01ec\0\u01ec\0\u4106\0\u4158\0\u41aa"+
    "\0\u01ec\0\u01ec\0\u41fc\0\u424e\0\u42a0\0\u42f2\0\u4344\0\u4396"+
    "\0\u43e8\0\u443a\0\u448c\0\u44de\0\u01ec\0\u4530\0\u4582\0\u45d4"+
    "\0\u4626\0\u01ec\0\u01ec\0\u01ec\0\u4678\0\u46ca\0\u471c\0\u476e"+
    "\0\u47c0\0\u4812\0\u4864\0\u48b6\0\u01ec\0\u4908\0\u495a\0\u49ac"+
    "\0\u49fe\0\u4a50\0\u4aa2\0\u4af4\0\u4b46\0\u01ec\0\u4b98\0\u4bea"+
    "\0\u4c3c\0\u01ec\0\u4c8e\0\u4ce0\0\u01ec\0\u4d32\0\u4d84\0\u4dd6"+
    "\0\u01ec\0\u01ec\0\u01ec\0\u4e28\0\u01ec\0\u01ec\0\u01ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\2\1\11\1\12\1\13\1\7\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\7\1\22\1\23\1\24\1\25"+
    "\1\7\1\3\1\7\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\7\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\5\7\6\13\1\63\5\7\1\64\6\7\123\0"+
    "\2\3\27\0\1\3\67\0\1\4\2\0\117\4\4\0"+
    "\1\7\1\65\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\31\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\5\7\1\66\2\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\1\7\1\67"+
    "\27\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\31\7\2\70"+
    "\1\0\4\70\1\71\1\70\1\72\110\70\4\0\3\7"+
    "\1\73\1\7\1\0\1\7\1\74\2\7\1\0\1\7"+
    "\1\75\6\7\1\0\2\7\1\0\1\7\12\0\3\7"+
    "\1\76\2\7\3\0\1\7\6\0\1\7\2\0\2\7"+
    "\1\77\26\7\2\100\1\0\6\100\1\101\1\100\1\102"+
    "\106\100\5\0\1\103\6\0\2\13\1\104\7\0\1\103"+
    "\1\0\1\13\46\0\6\13\31\0\1\104\1\105\12\0"+
    "\1\104\46\0\6\104\21\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\1\7\1\106\6\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\2\7\1\107\26\7\4\0\1\7\1\110"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\4\7\1\111\3\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\31\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\1\112\5\7"+
    "\3\0\1\113\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\4\7"+
    "\1\114\3\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\6\7"+
    "\1\115\1\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\116\6\0\1\117\2\0\31\7\4\0\1\7"+
    "\1\120\1\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\121\1\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\22\7\1\122\6\7"+
    "\60\0\1\123\46\0\1\103\1\124\5\0\2\13\1\104"+
    "\7\0\1\103\1\0\1\13\1\124\45\0\6\13\21\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\1\7\1\125"+
    "\3\7\1\126\3\0\1\127\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\4\7\1\130\3\7\1\0\2\7\1\0\1\7"+
    "\12\0\3\7\1\131\2\7\3\0\1\7\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\1\132\1\133\1\7\1\134"+
    "\3\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\7\1\135"+
    "\6\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\7\1\136"+
    "\6\7\1\0\2\7\1\0\1\7\12\0\1\137\2\7"+
    "\1\140\2\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\60\0\1\141\116\0\1\142\2\0\1\143\121\0\1\144"+
    "\45\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\3\7"+
    "\1\145\2\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\60\0\1\146\1\147\120\0\1\150\1\151\120\0\1\152"+
    "\121\0\1\153\121\0\1\154\3\0\1\155\41\0\1\7"+
    "\1\156\1\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\5\7"+
    "\1\157\2\7\1\0\2\7\1\0\1\7\12\0\3\7"+
    "\1\160\2\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\7\7\1\161\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\31\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\17\7\1\162\6\7\1\163"+
    "\2\7\4\0\2\7\1\164\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\6\7\1\165\1\7\1\0\2\7\1\0\1\7"+
    "\12\0\1\166\5\7\3\0\1\7\6\0\1\7\2\0"+
    "\31\7\4\0\1\7\1\167\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\31\7\2\70\1\0\4\70\1\170\1\70\1\72\110\70"+
    "\7\0\1\171\112\0\1\70\2\0\117\70\2\73\1\0"+
    "\4\73\1\172\1\73\1\173\110\73\2\74\1\0\6\74"+
    "\1\174\1\74\1\175\106\74\4\0\1\7\1\176\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\3\7\1\177\2\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\200\1\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\1\100\2\0\117\100\14\0"+
    "\2\201\11\0\1\202\1\201\23\0\1\202\22\0\6\201"+
    "\22\0\1\103\6\0\2\104\10\0\1\103\1\0\1\104"+
    "\46\0\6\104\22\0\1\103\6\0\2\105\10\0\1\103"+
    "\1\0\1\105\46\0\6\105\21\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\203\5\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\2\7\1\204\3\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\205\1\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\1\206\5\7\3\0\1\207\6\0"+
    "\1\7\2\0\31\7\4\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\210\6\0\1\7\2\0"+
    "\31\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\1\211\5\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\5\7\1\212\2\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\6\7\1\213\1\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\214\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\215\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\5\7\1\216\2\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\1\7\1\217\6\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\23\7\1\220\5\7\5\0\1\221\2\0\1\221"+
    "\1\0\1\221\1\0\2\221\4\0\2\221\2\0\1\221"+
    "\1\0\1\221\22\0\1\221\12\0\1\221\2\0\1\221"+
    "\5\0\6\221\3\0\2\221\4\0\1\221\7\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\2\7\1\222\3\7"+
    "\3\0\1\7\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\4\7\1\223\1\7"+
    "\3\0\1\7\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\2\7\1\224\3\7"+
    "\3\0\1\7\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\225\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\1\226\5\7\3\0\1\7\6\0"+
    "\1\7\2\0\31\7\4\0\3\7\1\0\1\7\1\0"+
    "\1\227\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\31\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\6\7\1\230\1\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\2\7\1\231\26\7\4\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\3\7\1\232\2\7\3\0\1\7\6\0"+
    "\1\7\2\0\31\7\4\0\2\7\1\233\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\1\234\6\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\235\1\7\3\0\1\236\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\5\7\1\237\3\0\1\7\6\0\1\7\2\0"+
    "\31\7\4\0\1\7\1\240\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\31\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\241\6\0\1\7\2\0\31\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\15\7\1\242\13\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\1\7\1\243\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\5\7\1\244\23\7\4\0\3\7"+
    "\1\245\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\1\7\1\246\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\5\7\1\247\3\0\1\7\6\0"+
    "\1\7\2\0\31\7\4\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\250\6\0\1\7\2\0"+
    "\31\7\7\171\1\251\112\171\1\73\2\0\117\73\1\74"+
    "\2\0\117\74\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\4\7\1\252\3\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\5\7\1\253\2\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\31\7\4\0\1\7\1\254\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\31\7\14\0\2\201\12\0\1\201\46\0\6\201"+
    "\21\0\1\7\1\255\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\1\7\1\256\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\2\7\1\257\5\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\6\7\1\260\1\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\3\7\1\261\25\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\262\1\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\263\1\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\6\7\1\203\1\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\1\7\1\264\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\1\265\6\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\5\7"+
    "\1\266\3\0\1\7\6\0\1\7\2\0\31\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\2\7\1\267\5\7\1\0\2\7\1\0\1\7\12\0"+
    "\1\270\5\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\271\7\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\31\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\5\7\1\272\2\7\1\0\2\7\1\0\1\7\12\0"+
    "\3\7\1\273\2\7\3\0\1\7\6\0\1\7\2\0"+
    "\31\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\6\7\1\274"+
    "\22\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\1\275\5\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\1\7\1\276\27\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\5\7\1\277\2\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\6\7\1\300\1\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\4\7\1\301\3\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\302\4\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\1\7\1\303\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\7\1\304\6\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\4\7\1\305\3\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\6\7\1\306\1\7\1\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\307\1\7\3\0\1\7\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\16\7"+
    "\1\310\12\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\311\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\31\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\312\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\5\0\1\313\2\0\1\313\1\0\1\313\1\0\1\313"+
    "\5\0\2\313\2\0\1\313\1\0\1\313\22\0\1\313"+
    "\12\0\1\313\2\0\1\313\5\0\6\313\3\0\2\313"+
    "\4\0\1\313\7\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\314\1\7\3\0\1\7\6\0\1\7"+
    "\2\0\31\7\7\171\1\315\112\171\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\4\7\1\316\24\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\6\7\1\317"+
    "\1\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\5\7\1\320\23\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\7\1\321"+
    "\6\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\1\7\1\322"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\1\7\1\323"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\7\7\1\324\21\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\6\7\1\325"+
    "\1\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\7\1\326"+
    "\6\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\1\7\1\327"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\1\330\30\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\331\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\24\7"+
    "\1\332\4\7\4\0\1\7\1\333\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\1\334\6\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\7\7"+
    "\1\335\21\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\5\7\1\336\3\0\1\7\6\0\1\7\2\0"+
    "\31\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\4\7\1\337\3\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\31\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\1\340\5\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\341\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\342\2\0\31\7\4\0\1\7\1\343\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\1\7\1\344\6\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\4\7\1\345\1\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\1\7\1\346\6\7"+
    "\1\0\2\7\1\0\1\7\12\0\1\347\5\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\350\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\20\7\1\351\5\7\1\352\1\7\1\353\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\20\7\1\354\5\7\1\355"+
    "\2\7\5\0\1\313\1\0\1\356\1\313\1\0\1\313"+
    "\1\0\1\313\5\0\2\313\2\0\1\313\1\0\1\313"+
    "\22\0\1\313\12\0\1\313\2\0\1\313\5\0\6\313"+
    "\3\0\2\313\4\0\1\313\3\0\7\171\1\357\112\171"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\13\7\1\360\15\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\4\7\1\361\3\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\362\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\11\7\1\363\17\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\4\7\1\364\1\7"+
    "\3\0\1\7\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\6\7"+
    "\1\365\1\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\4\7\1\366\1\7"+
    "\3\0\1\7\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\3\7\1\367\25\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\370\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\371\4\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\372\1\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\10\7\1\373\20\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\2\7\1\374\26\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\4\7\1\375\1\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\7\6\0"+
    "\1\7\2\0\1\376\30\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\5\7\1\377\2\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\1\7\1\u0100\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\4\7\1\u0101\3\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\4\7\1\u0102\3\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\u0103\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\17\7"+
    "\1\u0104\11\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\7\7\1\u0105\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\31\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\5\7\1\u0106"+
    "\23\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\26\7\1\u0107"+
    "\2\7\4\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\7\7\1\u0108\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\5\7\1\u0109\23\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\7\7\1\u010a\21\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\u010b\4\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\12\7\1\u010c\16\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\6\7\1\u010d\1\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\25\7\1\u010e\3\7"+
    "\4\0\1\7\1\u010f\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\1\u0110"+
    "\5\7\3\0\1\7\6\0\1\7\2\0\31\7\4\0"+
    "\1\7\1\u0111\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\31\7\4\0"+
    "\1\7\1\u0112\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\10\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\31\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\u0113\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\10\7\1\0"+
    "\2\7\1\0\1\7\12\0\6\7\3\0\1\u0114\6\0"+
    "\1\7\2\0\31\7\4\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\0\10\7\1\0\2\7\1\0"+
    "\1\7\12\0\6\7\3\0\1\7\6\0\1\7\2\0"+
    "\1\u0115\30\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\u0116\5\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\20\7"+
    "\1\u0117\10\7\4\0\3\7\1\0\1\u0118\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\u0119\7\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\31\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\5\7\1\u011a\23\7\4\0"+
    "\3\7\1\0\1\u011b\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\1\u011c\7\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\1\7\1\u011d\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\24\7\1\u011e\4\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\u011f\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\u0120\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\u0121\1\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\u0122\1\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\4\7"+
    "\1\u0123\1\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\1\7\1\u0124\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\31\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\20\7\1\u0125\10\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\26\7\1\u0126\2\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\10\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\6\7\1\u0127\22\7"+
    "\4\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\0\1\u0128\7\7\1\0\2\7\1\0\1\7\12\0"+
    "\6\7\3\0\1\7\6\0\1\7\2\0\31\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\26\7\1\u0129\2\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\10\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\6\7\1\u012a\22\7\4\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\1\u012b\7\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\4\7\1\u012c\1\7"+
    "\3\0\1\7\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\3\7\1\u012d\25\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7"+
    "\1\u012e\6\7\1\0\2\7\1\0\1\7\12\0\6\7"+
    "\3\0\1\7\6\0\1\7\2\0\31\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\15\7\1\u012f\13\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\22\7\1\u0130\6\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\7\7\1\u0131\21\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\7\7\1\u0132\21\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\22\7\1\u0133\6\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\10\7"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\7\7\1\u0134\21\7\4\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\7\7"+
    "\1\u0135\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\6\7\1\u0136"+
    "\1\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\4\7\1\u0137"+
    "\3\7\1\0\2\7\1\0\1\7\12\0\6\7\3\0"+
    "\1\7\6\0\1\7\2\0\31\7\4\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\0\7\7\1\u0138"+
    "\1\0\2\7\1\0\1\7\12\0\6\7\3\0\1\7"+
    "\6\0\1\7\2\0\31\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\17\7\1\u0139\11\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\10\7\1\u013a\20\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\11\7\1\u013b\17\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\17\7\1\u013c\11\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\10\7\1\u013d\20\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\7\6\0\1\7"+
    "\2\0\21\7\1\u013e\7\7\4\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\10\7\1\0\2\7"+
    "\1\0\1\7\12\0\6\7\3\0\1\u013f\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\21\7"+
    "\1\u0140\7\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\27\7"+
    "\1\u0141\1\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\12\7"+
    "\1\u0142\16\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\27\7"+
    "\1\u0143\1\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\13\7"+
    "\1\u0144\15\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\4\7\1\u0145\1\7\3\0\1\7\6\0\1\7"+
    "\2\0\31\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\21\7"+
    "\1\u0146\7\7\4\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\10\7\1\0\2\7\1\0\1\7"+
    "\12\0\6\7\3\0\1\7\6\0\1\7\2\0\7\7"+
    "\1\u0147\21\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20090];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\12\11\16\1\1\11\1\1\2\11"+
    "\6\1\1\0\1\1\3\0\3\1\2\0\1\11\1\0"+
    "\1\1\1\0\15\1\1\11\1\0\14\1\4\11\1\1"+
    "\10\11\12\1\1\11\1\0\1\11\2\0\1\11\4\1"+
    "\1\0\42\1\1\0\3\1\1\0\41\1\1\0\1\1"+
    "\1\0\40\1\1\11\131\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _VyperLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VyperLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 99: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 100: break;
          case 3: 
            { return COMMENT;
            } 
            // fall through
          case 101: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 102: break;
          case 5: 
            { return DECIMALNUMBER;
            } 
            // fall through
          case 103: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 104: break;
          case 7: 
            { return MINUS;
            } 
            // fall through
          case 105: break;
          case 8: 
            { return DECORATOR;
            } 
            // fall through
          case 106: break;
          case 9: 
            { return SEMICOLON;
            } 
            // fall through
          case 107: break;
          case 10: 
            { return COMMA;
            } 
            // fall through
          case 108: break;
          case 11: 
            { return COLON;
            } 
            // fall through
          case 109: break;
          case 12: 
            { return LBRACKET;
            } 
            // fall through
          case 110: break;
          case 13: 
            { return RBRACKET;
            } 
            // fall through
          case 111: break;
          case 14: 
            { return LBRACE;
            } 
            // fall through
          case 112: break;
          case 15: 
            { return RBRACE;
            } 
            // fall through
          case 113: break;
          case 16: 
            { return LPAREN;
            } 
            // fall through
          case 114: break;
          case 17: 
            { return RPAREN;
            } 
            // fall through
          case 115: break;
          case 18: 
            { return PLUS;
            } 
            // fall through
          case 116: break;
          case 19: 
            { return MULT;
            } 
            // fall through
          case 117: break;
          case 20: 
            { return DIV;
            } 
            // fall through
          case 118: break;
          case 21: 
            { return ASSIGN;
            } 
            // fall through
          case 119: break;
          case 22: 
            { return MORE;
            } 
            // fall through
          case 120: break;
          case 23: 
            { return PERCENT;
            } 
            // fall through
          case 121: break;
          case 24: 
            { return LESS;
            } 
            // fall through
          case 122: break;
          case 25: 
            { return CARET;
            } 
            // fall through
          case 123: break;
          case 26: 
            { return QUESTION;
            } 
            // fall through
          case 124: break;
          case 27: 
            { return TILDE;
            } 
            // fall through
          case 125: break;
          case 28: 
            { return STRINGLITERALDOUBLE;
            } 
            // fall through
          case 126: break;
          case 29: 
            { return STRINGLITERALSINGLE;
            } 
            // fall through
          case 127: break;
          case 30: 
            { return FIXEDNUMBER;
            } 
            // fall through
          case 128: break;
          case 31: 
            { return AS;
            } 
            // fall through
          case 129: break;
          case 32: 
            { return MINUS_ASSIGN;
            } 
            // fall through
          case 130: break;
          case 33: 
            { return IF;
            } 
            // fall through
          case 131: break;
          case 34: 
            { return IN;
            } 
            // fall through
          case 132: break;
          case 35: 
            { return OR;
            } 
            // fall through
          case 133: break;
          case 36: 
            { return PLUS_ASSIGN;
            } 
            // fall through
          case 134: break;
          case 37: 
            { return EXPONENT;
            } 
            // fall through
          case 135: break;
          case 38: 
            { return MULT_ASSIGN;
            } 
            // fall through
          case 136: break;
          case 39: 
            { return DIV_ASSIGN;
            } 
            // fall through
          case 137: break;
          case 40: 
            { return EQ;
            } 
            // fall through
          case 138: break;
          case 41: 
            { return TO;
            } 
            // fall through
          case 139: break;
          case 42: 
            { return MOREEQ;
            } 
            // fall through
          case 140: break;
          case 43: 
            { return RSHIFT;
            } 
            // fall through
          case 141: break;
          case 44: 
            { return NEQ;
            } 
            // fall through
          case 142: break;
          case 45: 
            { return PERCENT_ASSIGN;
            } 
            // fall through
          case 143: break;
          case 46: 
            { return LESSEQ;
            } 
            // fall through
          case 144: break;
          case 47: 
            { return LSHIFT;
            } 
            // fall through
          case 145: break;
          case 48: 
            { return STRINGLITERALDOUBLEB;
            } 
            // fall through
          case 146: break;
          case 49: 
            { return STRINGLITERALSINGLEB;
            } 
            // fall through
          case 147: break;
          case 50: 
            { return SCIENTIFICNUMBER;
            } 
            // fall through
          case 148: break;
          case 51: 
            { return AND;
            } 
            // fall through
          case 149: break;
          case 52: 
            { return HEXNUMBER;
            } 
            // fall through
          case 150: break;
          case 53: 
            { return MAP;
            } 
            // fall through
          case 151: break;
          case 54: 
            { return FOR;
            } 
            // fall through
          case 152: break;
          case 55: 
            { return NOT;
            } 
            // fall through
          case 153: break;
          case 56: 
            { return DEF;
            } 
            // fall through
          case 154: break;
          case 57: 
            { return ELSE;
            } 
            // fall through
          case 155: break;
          case 58: 
            { return ELIF;
            } 
            // fall through
          case 156: break;
          case 59: 
            { return BOOL;
            } 
            // fall through
          case 157: break;
          case 60: 
            { return BOOLEANLITERAL;
            } 
            // fall through
          case 158: break;
          case 61: 
            { return SELF;
            } 
            // fall through
          case 159: break;
          case 62: 
            { return PASS;
            } 
            // fall through
          case 160: break;
          case 63: 
            { return FROM;
            } 
            // fall through
          case 161: break;
          case 64: 
            { return EVENT;
            } 
            // fall through
          case 162: break;
          case 65: 
            { return BREAK;
            } 
            // fall through
          case 163: break;
          case 66: 
            { return RAISE;
            } 
            // fall through
          case 164: break;
          case 67: 
            { return RANGE;
            } 
            // fall through
          case 165: break;
          case 68: 
            { return UNITS;
            } 
            // fall through
          case 166: break;
          case 69: 
            { return FIXED;
            } 
            // fall through
          case 167: break;
          case 70: 
            { return CLEAR;
            } 
            // fall through
          case 168: break;
          case 71: 
            { return HEXLITERAL;
            } 
            // fall through
          case 169: break;
          case 72: 
            { return MULTILINESTRINGTOKEN;
            } 
            // fall through
          case 170: break;
          case 73: 
            { return RETURN;
            } 
            // fall through
          case 171: break;
          case 74: 
            { return ASSERT;
            } 
            // fall through
          case 172: break;
          case 75: 
            { return STRUCT;
            } 
            // fall through
          case 173: break;
          case 76: 
            { return STRING;
            } 
            // fall through
          case 174: break;
          case 77: 
            { return IMPORT;
            } 
            // fall through
          case 175: break;
          case 78: 
            { return INT128;
            } 
            // fall through
          case 176: break;
          case 79: 
            { return PUBLIC;
            } 
            // fall through
          case 177: break;
          case 80: 
            { return BYTES32;
            } 
            // fall through
          case 178: break;
          case 81: 
            { return UINT256;
            } 
            // fall through
          case 179: break;
          case 82: 
            { return ADDRESS;
            } 
            // fall through
          case 180: break;
          case 83: 
            { return PRIVATE;
            } 
            // fall through
          case 181: break;
          case 84: 
            { return PAYABLE;
            } 
            // fall through
          case 182: break;
          case 85: 
            { return TYPENAME;
            } 
            // fall through
          case 183: break;
          case 86: 
            { return CONSTANT;
            } 
            // fall through
          case 184: break;
          case 87: 
            { return CONTRACT;
            } 
            // fall through
          case 185: break;
          case 88: 
            { return CONTINUE;
            } 
            // fall through
          case 186: break;
          case 89: 
            { return MODIFYING;
            } 
            // fall through
          case 187: break;
          case 90: 
            { return IMPLEMENTS;
            } 
            // fall through
          case 188: break;
          case 91: 
            { return MAX_INT128;
            } 
            // fall through
          case 189: break;
          case 92: 
            { return MIN_INT128;
            } 
            // fall through
          case 190: break;
          case 93: 
            { return MAX_DECIMAL;
            } 
            // fall through
          case 191: break;
          case 94: 
            { return MAX_UINT256;
            } 
            // fall through
          case 192: break;
          case 95: 
            { return MIN_DECIMAL;
            } 
            // fall through
          case 193: break;
          case 96: 
            { return NONREENTRANT;
            } 
            // fall through
          case 194: break;
          case 97: 
            { return ZERO_ADDRESS;
            } 
            // fall through
          case 195: break;
          case 98: 
            { return EMPTY_BYTES32;
            } 
            // fall through
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

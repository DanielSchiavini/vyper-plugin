

{


  parserClass="com.vyperplugin.parser.VyperParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  implements="com.vyperplugin.psi.VyperElement"

  psiClassPrefix="Vyper"
  psiImplClassSuffix="Impl"
  psiPackage="com.vyperplugin.psi"
  psiImplPackage="com.vyperplugin.psi.impl"

  elementTypeHolderClass="com.vyperplugin.psi.VyperTypes"
  elementTypeClass="com.vyperplugin.psi.VyperElementType"
  tokenTypeClass="com.vyperplugin.psi.VyperTokenType"

  parserUtilClass = "com.vyperplugin.parser.ParserUtil"



tokens = [
   DECORATOR = '@'
   comment='regexp:(#.*)'
   SEMICOLON=';'
   COMMA=','
   DOT='.'
   COLON=':'
   LBRACKET='['
   RBRACKET=']'
   LBRACE='{'
   RBRACE='}'
   LPAREN='('
   RPAREN=')'
   IMPORT = 'import'
   FROM = 'from'

   PLUS='+'
   MINUS='-'
   MULT='*'
   DIV='/'
   EXPONENT='**'
   NOT='not'
   ASSIGN='='
   TO='=>'
   EQ='=='
   NEQ='!='
   PLUS_ASSIGN='+='
   MINUS_ASSIGN='-='
   MULT_ASSIGN='*='
   DIV_ASSIGN='/='
   PERCENT_ASSIGN='%='
   LESS='<'
   LESSEQ='<='
   MORE='>'
   MOREEQ='>='
   CARET='^'
   AND='and'
   OR='or'
   QUESTION='?'
   PERCENT='%'
   TILDE='~'
   LSHIFT='<<'
   RSHIFT='>>'


    hexLiteral='regexp:hex"([0-9a-fA-F]+)"'
    stringLiteralDouble='regexp:("([^"\r\n\\]|\\.)*")'
    stringLiteralDoubleB='regexp:(b"([^"\r\n\\]|\\.)*")'
    stringLiteralSingle="regexp:('([^'\r\n\\]|\\.)*')"
    stringLiteralSingleB="regexp:(b'([^'\r\n\\]|\\.)*')"
    MultiLineStringToken =  'regexp:"""[\d\D]*?"""'

    decimalNumber='regexp:([0-9][_0-9]*)'
    fixedNumber='regexp:(([0-9][_0-9]*)+\.[_0-9]*|([0-9][_0-9]*)*\.([0-9][_0-9]*))'
    booleanLiteral='regexp:True|False'
    scientificNumber='regexp:((([0-9][_0-9]*)+|([0-9][_0-9]*)+\.[_0-9]*|([0-9][_0-9]*|[0-9])*\.[_0-9]+)[Ee][+-]?[_0-9]+)'
    hexNumber='regexp:(0[xX][_0-9a-fA-F]+)'

    constant='constant'
    public='public'
    private='private'
    nonreentrant='nonreentrant'
    payable='payable'
    modifying='modifying'
    event='event'
    range = 'range'

    newline = 'regexp:(\n|(\r\n))'
    WHITE_SPACE = 'regexp:\s+'

    Identifier='regexp:([A-Za-z_]\w*)'
    //add !@ etc.
//    BadStatementString = 'regexp:(\w+)'
    //ALL='regexp:[\^a-zA-Z_0-9.<>"]*' for preview
]

//to handle left recursion
extends(".*Expression") = Expression

}

VyperFile ::= ((!<<eof>> SourceUnit) (&INDEQ SourceUnit)*)?

external INDEQ ::= indEq
external INDEQNSP ::= indEqAndNoSpaces
external INDLT ::= indLt
external INDGT ::= indGt
external INDNONE ::= indNone
external OPTIND ::= indOpt



// : External contract and struct declarations must come before event declarations, global declarations,
// and function definitions
private SourceUnit ::= ( ImportDirective
                        | UserDefinedConstantsExpression
                        | ImplementsDirective
                        | StructDefinition
                        | UnitsDefinition
                        | ExternalInterfaces
                        | EventDeclaration
                        | FunctionDefinition
                        | StateVariableDeclaration
                        | BadStatement)
                        {recoverWhile=structRecover}


BadStatement ::= Identifier | StringLiteral |BAD_CHARACTER
private recoverINDLT ::= !(&INDLT)
/*
units: {
    cm: "centimeter",
    km: "kilometer"
}
*/
UnitsDefinition ::= UnitsDefinitionPrefix '}'

private UnitsDefinitionPrefix ::= units  (&INDNONE ':') (&INDNONE '{')
     ( (Identifier ':' StringLiteral) ( ',' Identifier ':' StringLiteral)* )?
  {
pin = 1
recoverWhile = unitsRecover
//программно чекать до след newLine наверное чтобы дать возможность дальше парситиь
}
//will consume all the file if '}' not found
private unitsRecover::=!('}')



UserDefinedConstantsExpression ::= Identifier &INDNONE ':' &INDNONE constant &INDNONE'(' TYPE ')' &INDNONE'=' &INDNONE Expression  {
 pin=5
}

private ImportDirective ::= ( import &INDNONE IMPORT_PATH &INDNONE as &INDNONE Identifier )
                   |( from  &INDNONE IMPORT_PATH &INDNONE import &INDNONE Identifier  )  {
pin(".*")=1
}

IMPORT_PATH ::= Identifier  (&INDNONE '.' &INDNONE Identifier)*

// implements statements
ImplementsDirective ::=  implements &INDNONE ':' &INDNONE Identifier (&INDNONE ',' &INDNONE Identifier )* {
pin=1
}

// external interfaces ok
ExternalInterfaces ::= contract &INDNONE Identifier &INDNONE ':'
                        <<indented (ExternalInterfaceBody+) >>
                {pin=1}

private ExternalInterfaceBody ::= ( def &INDNONE Identifier &INDNONE '('
( FunctionArgs)? ')' (&INDNONE '->' &INDNONE TYPE)? &INDNONE ':' &INDNONE ExternalFunStatus )
{pin = 1}
private ExternalFunStatus ::= modifying | constant


FunctionArgs ::= ParamDef  (',' ParamDef )*

ParamDef ::= Identifier ':' TYPE ('=' Expression)? {
            mixin = "com.vyperplugin.psi.VyperNamedElementImpl"
            implements = "com.vyperplugin.psi.VyperNamedElement"
}
// could be default assignment
StructDefinition ::= struct &INDNONE Identifier &INDNONE COLON  StructBody {
pin = 1
}

private StructBody ::= StructSingleDef | <<indented (StructMultipleDef) >>
private StructSingleDef ::= (&INDNONE StructLocalVariableDefinition)

private StructMultipleDef ::= StructLocalVariableDefinition (&INDEQ StructLocalVariableDefinition )*
//{recoverWhile=recoverStruct}
private StructLocalVariableDefinition ::= LocalVariableDefinition | BadStatement
{recoverWhile=structRecover}

//private recoverINDEQ ::=!(&INDEQ)
private structRecover ::= !(&INDEQ | &INDLT |<<eof>>)
private recoverStruct ::= !(&INDLT | &INDEQ)


//ContractDefinition ::= ContractDefinition_+
//private ContractDefinition_ ::= (EventDeclaration | StateVariableDeclaration | FunctionDefinition)
//                                {recoverWhile=structRecover}

//ok
//Events must all come before global declarations and function definitions
EventDeclaration ::= Identifier &INDNONE ':' &INDNONE event &INDNONE '(' '{'   EventProperty? '}' ')'  {
pin=5
}

EventProperty ::= Identifier ':'    (IndexedData | TYPE)
                (',' Identifier ':' (IndexedData |TYPE))*

IndexedData ::= IndexedType '(' TYPE ')'

private IndexedType ::= 'indexed'

// VARIABLES

// state variables  May not assign value whilst defining type
StateVariableDeclaration ::= Identifier &INDNONE ':' (  (&INDNONE StateVariableModifier &INDNONE '(' &INDNONE TYPE &INDNONE ')')
| (&INDNONE TYPE ))
{
mixin = "com.vyperplugin.psi.VyperNamedElementImpl"
implements = "com.vyperplugin.psi.VyperNamedElement"
}
// StateVariableModifier if omitted then it's private
StateVariableModifier ::= public


// semantic : map could not be inside functions
LocalVariableDefinition ::=  ( LocalVariableDeclaration (&INDNONE '=') (&INDNONE Expression) ) |
                           LocalVariableDeclaration

LocalVariableDeclaration ::= Identifier &INDNONE ':' &INDNONE TYPE

//Colon ::= (&INDNONE ':')
//Type ::=  (&INDNONE TYPE)

MultiLineString ::=  MultiLineStringToken

// FUNCTIONS

private FunDef ::= def (&INDNONE Identifier) (&INDNONE '(') FunctionArgs?  ')' (&INDNONE '->' &INDNONE TYPE)? (&INDNONE ':')
                   {pin = 1}
private FunBody ::= (&INDNONE Statement)
                    | <<indented ((MultiLineString)? &INDEQ Statement (&INDEQ Statement)*) >>
FunctionDefinition ::=
    FunctionModifier (&INDEQ FunctionModifier)*
//    def &INDNONE Identifier &INDNONE '(' FunctionArgs?  ')' (&INDNONE '->' &INDNONE TYPE)? (&INDNONE ':')
//    FunBody
    FunDef
    FunBody
   {pin=1
   implements = "com.vyperplugin.psi.VyperFunctionDefElement"
   mixin = "com.vyperplugin.psi.VyperFunctionDefMixin"}


//FunctionModifier ::= (&INDEQ FunctionModifierOptional)* (&INDEQ FunctionModifierMandatory) (&INDEQ FunctionModifierOptional)*
//private FunctionModifierMandatory ::= DECORATOR ((&INDNONE public) | (&INDNONE private)) {pin = 1}
FunctionModifier ::=  (DECORATOR (&INDNONE (public | private |constant | payable | (nonreentrant (&INDNONE '(') UNIQUE_KEY ')'))))
                      {pin = 1}

UNIQUE_KEY ::=  stringLiteralSingle | stringLiteralDouble

// statements
Statement ::= PassStatement
              | IfStatement
              | ForStatement
              | Continue
              | Break
              | Return
              | Raise
              | EmitStatement
              | SimpleStatement
              | BadStatement
              {recoverWhile = recoverStatement}

private recoverStatement ::= !(&INDEQ|&INDLT)


private CondStmt ::= Expression &INDNONE ':' ((&INDNONE Statement)
                                     | <<indented (Statement (&INDEQ Statement)*)>>)

private ElifStmt ::= elif &INDNONE CondStmt
                     {pin = 1}

private ElseStmt ::= else &INDNONE ':' ((&INDNONE Statement)
                                       | <<indented (Statement (&INDEQ Statement)*)>>)
                     {pin = 1}

IfStatement ::= if &INDNONE CondStmt
                (&INDEQ ElifStmt)*
                (&INDEQ ElseStmt)?
                {pin=1}


private SimpleStatement ::= LocalVariableDefinition | ExpressionStatement
private ExpressionStatement ::= Expression

ForStatement ::= for &INDNONE Identifier &INDNONE in &INDNONE Expression &INDNONE ':'
                    (&INDNONE Statement
                    | <<indented (Statement (&INDEQ Statement)*)>>){
pin=1
}


private Continue ::= continue

private Break ::= break

private Return ::= return (&INDNONE Expression)? {
pin=1
}
private Raise ::= raise

EmitStatement ::= 'log.' &INDNONE FunctionCallExpression {
pin=1
}

private PassStatement ::= pass

Expression ::=
  AssignmentExpression
  | RangeExpression
//  | FunctionCallExpression
  | ParenthesiziedExpression
  | CallExpression
  | NewExpression
  | AssertExpression
  | EqExpression
  | OrExpression
  | AndExpression
  | CompExpression
  | PlusMinExpression
  | MultDivExpression
  | ExponentExpression
  | UnaryExpression
  | ClearExpression
  | IndexAccessExpression
  | SelfAccessExpression
//  | SelfFunctionCall
  | MemberAccessExpression
  | MemberIndexAccess
  | InlineArrayExpression
  | PrimaryExpression


//self function call?

private RangeInterval ::= PrimaryExpression ',' PrimaryExpression ',' PrimaryExpression
                         | PrimaryExpression ',' PrimaryExpression
                         | PrimaryExpression


RangeExpression ::= range &INDNONE '(' RangeInterval ')'


SelfAccessExpression ::= self (&INDNONE '.') (&INDNONE VarLiteral)


//SelfFunctionCall ::= self &INDNONE '.' Identifier &INDNONE '(' (FunctionArgs)? ')'

NewExpression ::= Identifier (&INDNONE'(') '{' (  ((Identifier &INDNONE ':' &INDNONE Expression) | NewExpression)
                             (',' ((Identifier &INDNONE ':' &INDNONE Expression) | NewExpression))*)? '}' ')'

AssignmentExpression ::=
    Expression (&INDNONE ('=' | '+=' | '-=' | '*=' | '/=' | '%='))
    Expression { rightAssociative=true  }
//??
CallExpression ::= Expression
                 ( ( &INDNONE '.' Identifier ) | ( &INDNONE '[' Expression ']' ) )*
                  &INDNONE '(' FunctionCallArguments? ')' (&INDNONE '(' FunctionCallArguments? ')')*
                  {
                  implements = "com.vyperplugin.psi.VyperReferenceElement"
                  mixin = "com.vyperplugin.psi.VyperCallElement"

                  }

//??
FunctionCallExpression ::= (Identifier &INDNONE '(' FunctionCallArguments? ')') |
                           ( ( PrimaryExpression | NewExpression | TypeName  )
                           ( ( &INDNONE '.' Identifier ) | ( &INDNONE '[' Expression? ']' ) )*
                                     &INDNONE '(' FunctionCallArguments? ')' )  {
   //implements and mixin
}


//left recursion?
MemberAccessExpression ::= Expression &INDNONE DotAccess
MemberIndexAccess ::=  Expression &INDNONE '.' Expression &INDNONE '[' Expression']' {extends=Expression}
private DotAccess ::= '.' (&INDNONE VarLiteral)
//recover?
IndexAccessExpression ::= Expression &INDNONE '[' Expression']'
//recover?
ParenthesiziedExpression ::= '(' Expression ')' {pin = 1}

ClearExpression ::= clear &INDNONE '(' Expression ')' {pin=1}


UnaryExpression ::=  (NOT | '~'  |  '+' | '-') &INDNONE Expression
InlineArrayExpression ::= '[' Expression (',' Expression)*  ']' {pin = 1}
AndExpression ::=  Expression AND Expression
OrExpression ::= Expression OR Expression
EqExpression ::= Expression ('==' | '!=') Expression
CompExpression ::= Expression ('<' | '>' | '<=' | '>=') Expression

PlusMinExpression ::= Expression ('+' | '-') Expression
MultDivExpression ::= Expression ('*' | '/' | '%') Expression
ExponentExpression ::= Expression '**' Expression

//multistring??
AssertExpression ::= assert &INDNONE Expression &INDNONE AssertMessage? {pin = 1}
private AssertMessage ::= ',' (stringLiteralDouble| stringLiteralSingle | MultiLineString)

FunctionCallArguments ::= Expression? ( &INDNONE ',' Expression )*




PrimaryExpression ::= VarLiteral
                  |BooleanLiteral
                  | NumberLiteral
                  | HexLiteral
                  | StringLiteral
                  | Constants
                  //type??
                  | TYPE

VarLiteral ::= Identifier {implements = "com.vyperplugin.psi.VyperReferenceElement"
                           mixin = "com.vyperplugin.psi.VyperVarLiteralMixin"}



// TYPES seems okay
TYPE ::=  ReferenceType
          | UnitType
          | ValueType
          | StructType

UnitType ::= Timestamp | Timedelta | Wei_value | CustomUnitType
CustomUnitType ::= (int128|uint256) &INDNONE '(' Expression ')'
private Timestamp ::= 'timestamp'
private Timedelta ::= 'timedelta'
private Wei_value ::= 'wei_value'

ValueType ::= int128 | uint256| bytes32 | address
             | bytes32 &INDNONE '[' (DecimalNumber | Identifier) ']' | fixed | bool |
                string   &INDNONE '[' (DecimalNumber | Identifier) ']'

private ReferenceType ::= ListType  | MapType

ListType ::= (UnitType| ValueType|StructType) &INDNONE '[' (DecimalNumber | Identifier) ']'
                    (&INDNONE '[' (DecimalNumber | Identifier) ']')*
StructType ::= Identifier

MapType ::= map  &INDNONE '(' (ValueType|UnitType)  ',' (ReferenceType |  UnitType|ValueType| StructType  ) ')' {
pin=1
}


private BooleanLiteral ::= booleanLiteral


private NumberLiteral ::= HexNumber | DecimalNumber |FixedNumber
private StringLiteral ::= stringLiteralDouble | stringLiteralDoubleB | stringLiteralSingle | stringLiteralSingleB|MultiLineString
private DecimalNumber ::= decimalNumber
private HexNumber ::= hexNumber
private HexLiteral ::= hexLiteral
private  FixedNumber ::=fixedNumber

//Builtin Constants
private Constants ::= ZERO_ADDRESS | EMPTY_BYTES32 | MAX_INT128 | MIN_INT128
             | MAX_DECIMAL | MIN_DECIMAL | MAX_UINT256
